// ************************************************************************ //
// WARNING                                                                    
// -------                                                                    
// This file is generated by the Type Library importer or Type Libary Editor. 
// Barring syntax errors, the Editor will parse modifications made to the file. 
// However, when applying changes via the Editor this file will be regenerated  
// and comments or formatting changes will be lost.                             
// ************************************************************************ //
// File generated on 21.10.2016 19:46:28 (- $Rev: 12980 $, 24947375).
// "C:\Program Files (x86)\Embarcadero\RAD Studio\10.0\bin\tlibimp.EXE" -i+ msxml6.dll

[
  uuid(F5078F18-C551-11D3-89B9-0000F81FE221), 
  version(6.0), 
  helpstring("Microsoft XML, v6.0")
    
]
library MSXML2
{

  importlib("stdole2.tlb");

  interface IXMLDOMNode;
  interface IXMLDOMNodeList;
  interface IXMLDOMNamedNodeMap;
  interface IXMLDOMDocument;
  interface IXMLDOMDocumentType;
  interface IXMLDOMImplementation;
  interface IXMLDOMElement;
  interface IXMLDOMAttribute;
  interface IXMLDOMDocumentFragment;
  interface IXMLDOMText;
  interface IXMLDOMCharacterData;
  interface IXMLDOMComment;
  interface IXMLDOMCDATASection;
  interface IXMLDOMProcessingInstruction;
  interface IXMLDOMEntityReference;
  interface IXMLDOMParseError;
  interface IXMLDOMNotation;
  interface IXMLDOMEntity;
  interface IXMLDOMParseError2;
  interface IXMLDOMParseErrorCollection;
  interface IXTLRuntime;
  interface ISAXXMLReader;
  interface ISAXEntityResolver;
  interface ISAXContentHandler;
  interface ISAXLocator;
  interface ISAXAttributes;
  interface ISAXDTDHandler;
  interface ISAXErrorHandler;
  interface ISAXXMLFilter;
  interface IVBSAXXMLFilter;
  interface IVBSAXXMLReader;
  interface IVBSAXEntityResolver;
  interface IVBSAXContentHandler;
  interface IVBSAXLocator;
  interface IVBSAXAttributes;
  interface IVBSAXDTDHandler;
  interface IVBSAXErrorHandler;
  interface IMXReaderControl;
  interface IMXSchemaDeclHandler;
  interface ISchemaElement;
  interface ISchemaParticle;
  interface ISchemaItem;
  interface ISchema;
  interface ISchemaItemCollection;
  interface ISchemaStringCollection;
  interface ISchemaType;
  interface ISchemaComplexType;
  interface ISchemaAny;
  interface ISchemaModelGroup;
  interface IMXXMLFilter;
  interface ISchemaAttribute;
  interface ISchemaAttributeGroup;
  interface ISchemaIdentityConstraint;
  interface ISchemaNotation;
  interface IXMLDOMSelection;
  dispinterface XMLDOMDocumentEvents;
  coclass DOMDocument60;
  interface IXMLDOMDocument3;
  interface IXMLDOMDocument2;
  interface IXMLDOMSchemaCollection;
  coclass FreeThreadedDOMDocument60;
  coclass XMLSchemaCache60;
  interface IXMLDOMSchemaCollection2;
  coclass XSLTemplate60;
  interface IXSLTemplate;
  interface IXSLProcessor;
  coclass XMLHTTP60;
  interface IXMLHTTPRequest;
  coclass FreeThreadedXMLHTTP60;
  interface IXMLHTTPRequest2;
  interface IXMLHTTPRequest2Callback;
  interface ISequentialStream;
  coclass ServerXMLHTTP60;
  interface IServerXMLHTTPRequest2;
  interface IServerXMLHTTPRequest;
  coclass SAXXMLReader60;
  coclass MXXMLWriter60;
  interface IMXWriter;
  interface ISAXDeclHandler;
  interface ISAXLexicalHandler;
  interface IVBSAXDeclHandler;
  interface IVBSAXLexicalHandler;
  coclass MXHTMLWriter60;
  coclass SAXAttributes60;
  interface IMXAttributes;
  coclass MXNamespaceManager60;
  interface IVBMXNamespaceManager;
  interface IMXNamespacePrefixes;
  interface IMXNamespaceManager;


  [
    helpstring("Constants that define a node's type")
  ]
  enum tagDOMNodeType
  {
    NODE_INVALID = 0, 
    NODE_ELEMENT = 1, 
    NODE_ATTRIBUTE = 2, 
    NODE_TEXT = 3, 
    NODE_CDATA_SECTION = 4, 
    NODE_ENTITY_REFERENCE = 5, 
    NODE_ENTITY = 6, 
    NODE_PROCESSING_INSTRUCTION = 7, 
    NODE_COMMENT = 8, 
    NODE_DOCUMENT = 9, 
    NODE_DOCUMENT_TYPE = 10, 
    NODE_DOCUMENT_FRAGMENT = 11, 
    NODE_NOTATION = 12
  };

  [
    helpstring("Schema Object Model Item Types")
  ]
  enum _SOMITEMTYPE
  {
    SOMITEM_SCHEMA = 4096, 
    SOMITEM_ATTRIBUTE = 4097, 
    SOMITEM_ATTRIBUTEGROUP = 4098, 
    SOMITEM_NOTATION = 4099, 
    SOMITEM_ANNOTATION = 4100, 
    SOMITEM_IDENTITYCONSTRAINT = 4352, 
    SOMITEM_KEY = 4353, 
    SOMITEM_KEYREF = 4354, 
    SOMITEM_UNIQUE = 4355, 
    SOMITEM_ANYTYPE = 8192, 
    SOMITEM_DATATYPE = 8448, 
    SOMITEM_DATATYPE_ANYTYPE = 8449, 
    SOMITEM_DATATYPE_ANYURI = 8450, 
    SOMITEM_DATATYPE_BASE64BINARY = 8451, 
    SOMITEM_DATATYPE_BOOLEAN = 8452, 
    SOMITEM_DATATYPE_BYTE = 8453, 
    SOMITEM_DATATYPE_DATE = 8454, 
    SOMITEM_DATATYPE_DATETIME = 8455, 
    SOMITEM_DATATYPE_DAY = 8456, 
    SOMITEM_DATATYPE_DECIMAL = 8457, 
    SOMITEM_DATATYPE_DOUBLE = 8458, 
    SOMITEM_DATATYPE_DURATION = 8459, 
    SOMITEM_DATATYPE_ENTITIES = 8460, 
    SOMITEM_DATATYPE_ENTITY = 8461, 
    SOMITEM_DATATYPE_FLOAT = 8462, 
    SOMITEM_DATATYPE_HEXBINARY = 8463, 
    SOMITEM_DATATYPE_ID = 8464, 
    SOMITEM_DATATYPE_IDREF = 8465, 
    SOMITEM_DATATYPE_IDREFS = 8466, 
    SOMITEM_DATATYPE_INT = 8467, 
    SOMITEM_DATATYPE_INTEGER = 8468, 
    SOMITEM_DATATYPE_LANGUAGE = 8469, 
    SOMITEM_DATATYPE_LONG = 8470, 
    SOMITEM_DATATYPE_MONTH = 8471, 
    SOMITEM_DATATYPE_MONTHDAY = 8472, 
    SOMITEM_DATATYPE_NAME = 8473, 
    SOMITEM_DATATYPE_NCNAME = 8474, 
    SOMITEM_DATATYPE_NEGATIVEINTEGER = 8475, 
    SOMITEM_DATATYPE_NMTOKEN = 8476, 
    SOMITEM_DATATYPE_NMTOKENS = 8477, 
    SOMITEM_DATATYPE_NONNEGATIVEINTEGER = 8478, 
    SOMITEM_DATATYPE_NONPOSITIVEINTEGER = 8479, 
    SOMITEM_DATATYPE_NORMALIZEDSTRING = 8480, 
    SOMITEM_DATATYPE_NOTATION = 8481, 
    SOMITEM_DATATYPE_POSITIVEINTEGER = 8482, 
    SOMITEM_DATATYPE_QNAME = 8483, 
    SOMITEM_DATATYPE_SHORT = 8484, 
    SOMITEM_DATATYPE_STRING = 8485, 
    SOMITEM_DATATYPE_TIME = 8486, 
    SOMITEM_DATATYPE_TOKEN = 8487, 
    SOMITEM_DATATYPE_UNSIGNEDBYTE = 8488, 
    SOMITEM_DATATYPE_UNSIGNEDINT = 8489, 
    SOMITEM_DATATYPE_UNSIGNEDLONG = 8490, 
    SOMITEM_DATATYPE_UNSIGNEDSHORT = 8491, 
    SOMITEM_DATATYPE_YEAR = 8492, 
    SOMITEM_DATATYPE_YEARMONTH = 8493, 
    SOMITEM_DATATYPE_ANYSIMPLETYPE = 8703, 
    SOMITEM_SIMPLETYPE = 8704, 
    SOMITEM_COMPLEXTYPE = 9216, 
    SOMITEM_PARTICLE = 16384, 
    SOMITEM_ANY = 16385, 
    SOMITEM_ANYATTRIBUTE = 16386, 
    SOMITEM_ELEMENT = 16387, 
    SOMITEM_GROUP = 16640, 
    SOMITEM_ALL = 16641, 
    SOMITEM_CHOICE = 16642, 
    SOMITEM_SEQUENCE = 16643, 
    SOMITEM_EMPTYPARTICLE = 16644, 
    SOMITEM_NULL = 2048, 
    SOMITEM_NULL_TYPE = 10240, 
    SOMITEM_NULL_ANY = 18433, 
    SOMITEM_NULL_ANYATTRIBUTE = 18434, 
    SOMITEM_NULL_ELEMENT = 18435
  };

  [
    helpstring("Schema Object Model Filters")
  ]
  enum _SCHEMADERIVATIONMETHOD
  {
    SCHEMADERIVATIONMETHOD_EMPTY = 0, 
    SCHEMADERIVATIONMETHOD_SUBSTITUTION = 1, 
    SCHEMADERIVATIONMETHOD_EXTENSION = 2, 
    SCHEMADERIVATIONMETHOD_RESTRICTION = 4, 
    SCHEMADERIVATIONMETHOD_LIST = 8, 
    SCHEMADERIVATIONMETHOD_UNION = 16, 
    SCHEMADERIVATIONMETHOD_ALL = 255, 
    SCHEMADERIVATIONMETHOD_NONE = 256
  };

  [
    helpstring("Schema Object Model Type variety values")
  ]
  enum _SCHEMATYPEVARIETY
  {
    SCHEMATYPEVARIETY_NONE = -1, 
    SCHEMATYPEVARIETY_ATOMIC = 0, 
    SCHEMATYPEVARIETY_LIST = 1, 
    SCHEMATYPEVARIETY_UNION = 2
  };

  [
    helpstring("Schema Object Model Whitespace facet values")
  ]
  enum _SCHEMAWHITESPACE
  {
    SCHEMAWHITESPACE_NONE = -1, 
    SCHEMAWHITESPACE_PRESERVE = 0, 
    SCHEMAWHITESPACE_REPLACE = 1, 
    SCHEMAWHITESPACE_COLLAPSE = 2
  };

  [
    helpstring("Schema Object Model Process Contents")
  ]
  enum _SCHEMAPROCESSCONTENTS
  {
    SCHEMAPROCESSCONTENTS_NONE = 0, 
    SCHEMAPROCESSCONTENTS_SKIP = 1, 
    SCHEMAPROCESSCONTENTS_LAX = 2, 
    SCHEMAPROCESSCONTENTS_STRICT = 3
  };

  [
    helpstring("Schema Object Model Content Types")
  ]
  enum _SCHEMACONTENTTYPE
  {
    SCHEMACONTENTTYPE_EMPTY = 0, 
    SCHEMACONTENTTYPE_TEXTONLY = 1, 
    SCHEMACONTENTTYPE_ELEMENTONLY = 2, 
    SCHEMACONTENTTYPE_MIXED = 3
  };

  [
    helpstring("Schema Object Model Attribute Uses")
  ]
  enum _SCHEMAUSE
  {
    SCHEMAUSE_OPTIONAL = 0, 
    SCHEMAUSE_PROHIBITED = 1, 
    SCHEMAUSE_REQUIRED = 2
  };

  
  enum _SERVERXMLHTTP_OPTION
  {
    SXH_OPTION_URL = -1, 
    SXH_OPTION_URL_CODEPAGE = 0, 
    SXH_OPTION_ESCAPE_PERCENT_IN_URL = 1, 
    SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS = 2, 
    SXH_OPTION_SELECT_CLIENT_SSL_CERT = 3
  };

  
  enum _SXH_SERVER_CERT_OPTION
  {
    SXH_SERVER_CERT_IGNORE_UNKNOWN_CA = 256, 
    SXH_SERVER_CERT_IGNORE_WRONG_USAGE = 512, 
    SXH_SERVER_CERT_IGNORE_CERT_CN_INVALID = 4096, 
    SXH_SERVER_CERT_IGNORE_CERT_DATE_INVALID = 8192, 
    SXH_SERVER_CERT_IGNORE_ALL_SERVER_ERRORS = 13056
  };

  
  enum _SXH_PROXY_SETTING
  {
    SXH_PROXY_SET_DEFAULT = 0, 
    SXH_PROXY_SET_PRECONFIG = 0, 
    SXH_PROXY_SET_DIRECT = 1, 
    SXH_PROXY_SET_PROXY = 2
  };

  [
    helpstring("Options for XHR properties")
  ]
  enum _XHR_PROPERTY
  {
    XHR_PROP_NO_CRED_PROMPT = 0, 
    XHR_PROP_NO_AUTH = 1, 
    XHR_PROP_TIMEOUT = 2, 
    XHR_PROP_NO_DEFAULT_HEADERS = 3, 
    XHR_PROP_REPORT_REDIRECT_STATUS = 4
  };

  [
    helpstring("Constants that define a node's type"), 
    public
  ]
  typedef enum tagDOMNodeType DOMNodeType;

  [
    helpstring("Schema Object Model Item Types"), 
    public
  ]
  typedef enum _SOMITEMTYPE SOMITEMTYPE;

  [
    helpstring("Schema Object Model Filters"), 
    public
  ]
  typedef enum _SCHEMADERIVATIONMETHOD SCHEMADERIVATIONMETHOD;

  [
    helpstring("Schema Object Model Type variety values"), 
    public
  ]
  typedef enum _SCHEMATYPEVARIETY SCHEMATYPEVARIETY;

  [
    helpstring("Schema Object Model Whitespace facet values"), 
    public
  ]
  typedef enum _SCHEMAWHITESPACE SCHEMAWHITESPACE;

  [
    helpstring("Schema Object Model Process Contents"), 
    public
  ]
  typedef enum _SCHEMAPROCESSCONTENTS SCHEMAPROCESSCONTENTS;

  [
    helpstring("Schema Object Model Content Types"), 
    public
  ]
  typedef enum _SCHEMACONTENTTYPE SCHEMACONTENTTYPE;

  [
    helpstring("Schema Object Model Attribute Uses"), 
    public
  ]
  typedef enum _SCHEMAUSE SCHEMAUSE;

  [
    helpstring("Options for ServerXMLHTTPRequest Option property"), 
    public
  ]
  typedef enum _SERVERXMLHTTP_OPTION SERVERXMLHTTP_OPTION;

  [
    helpstring("Flags for SXH_OPTION_IGNORE_SERVER_SSL_CERT_ERROR_FLAGS option"), 
    public
  ]
  typedef enum _SXH_SERVER_CERT_OPTION SXH_SERVER_CERT_OPTION;

  [
    helpstring("Settings for setProxy"), 
    public
  ]
  typedef enum _SXH_PROXY_SETTING SXH_PROXY_SETTING;

  [
    helpstring("Options for XHR properties"), 
    public
  ]
  typedef enum _XHR_PROPERTY XHR_PROPERTY;

  [
    hidden
  ]
  struct __msxml6_ReferenceRemainingTypes__
  {
    enum tagDOMNodeType __tagDomNodeType__;
    DOMNodeType __domNodeType__;
    enum _SERVERXMLHTTP_OPTION __serverXmlHttpOptionEnum__;
    SERVERXMLHTTP_OPTION __serverXmlHttpOption__;
    enum _SXH_SERVER_CERT_OPTION __serverCertOptionEnum__;
    SXH_SERVER_CERT_OPTION __serverCertOption__;
    enum _SXH_PROXY_SETTING __proxySettingEnum__;
    SXH_PROXY_SETTING __proxySetting__;
    enum _SOMITEMTYPE __somItemTypeEnum__;
    SOMITEMTYPE __somItemType__;
    enum _SCHEMAUSE __schemaUseEnum__;
    SCHEMAUSE __schemaUse__;
    enum _SCHEMADERIVATIONMETHOD __schemaDerivationMethodEnum__;
    SCHEMADERIVATIONMETHOD __schemaDerivationMethod__;
    enum _SCHEMACONTENTTYPE __schemaContentTypeEnum__;
    SCHEMACONTENTTYPE __schemaContentType__;
    enum _SCHEMAPROCESSCONTENTS __schemaProcessContentsEnum__;
    SCHEMAPROCESSCONTENTS __schemaProcessContents__;
    enum _SCHEMAWHITESPACE __schemaWhitespaceEnum__;
    SCHEMAWHITESPACE __schemaWhitespace__;
    enum _SCHEMATYPEVARIETY __schemaTypeVarietyEnum__;
    SCHEMATYPEVARIETY __schemaTypeVariety__;
  };

  
  struct tagXHR_COOKIE
  {
    LPWSTR pwszUrl;
    LPWSTR pwszName;
    LPWSTR pwszValue;
    LPWSTR pwszP3PPolicy;
    struct _FILETIME ftExpires;
    unsigned long dwFlags;
  };

  
  struct _FILETIME
  {
    unsigned long dwLowDateTime;
    unsigned long dwHighDateTime;
  };

  [
    uuid(2933BF80-7B36-11D2-B20E-00C04F983E60), 
    helpstring("Core DOM node interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMNode: IDispatch
  {
    [propget, id(0x00000002), helpstring("name of the node")]
    HRESULT _stdcall nodeName([out, retval] BSTR* name);
    [propget, id(0x00000003), helpstring("value stored in the node")]
    HRESULT _stdcall nodeValue([out, retval] VARIANT* value);
    [propput, id(0x00000003), helpstring("value stored in the node")]
    HRESULT _stdcall nodeValue([in] VARIANT value);
    [propget, id(0x00000004), helpstring("the node's type")]
    HRESULT _stdcall nodeType([out, retval] DOMNodeType* type);
    [propget, id(0x00000006), helpstring("parent of the node")]
    HRESULT _stdcall parentNode([out, retval] IXMLDOMNode** parent);
    [propget, id(0x00000007), helpstring("the collection of the node's children")]
    HRESULT _stdcall childNodes([out, retval] IXMLDOMNodeList** childList);
    [propget, id(0x00000008), helpstring("first child of the node")]
    HRESULT _stdcall firstChild([out, retval] IXMLDOMNode** firstChild);
    [propget, id(0x00000009), helpstring("last child of the node")]
    HRESULT _stdcall lastChild([out, retval] IXMLDOMNode** lastChild);
    [propget, id(0x0000000A), helpstring("left sibling of the node")]
    HRESULT _stdcall previousSibling([out, retval] IXMLDOMNode** previousSibling);
    [propget, id(0x0000000B), helpstring("right sibling of the node")]
    HRESULT _stdcall nextSibling([out, retval] IXMLDOMNode** nextSibling);
    [propget, id(0x0000000C), helpstring("the collection of the node's attributes")]
    HRESULT _stdcall attributes([out, retval] IXMLDOMNamedNodeMap** attributeMap);
    [id(0x0000000D), helpstring("insert a child node")]
    HRESULT _stdcall insertBefore([in] IXMLDOMNode* newChild, [in] VARIANT refChild, [out, retval] IXMLDOMNode** outNewChild);
    [id(0x0000000E), helpstring("replace a child node")]
    HRESULT _stdcall replaceChild([in] IXMLDOMNode* newChild, [in] IXMLDOMNode* oldChild, [out, retval] IXMLDOMNode** outOldChild);
    [id(0x0000000F), helpstring("remove a child node")]
    HRESULT _stdcall removeChild([in] IXMLDOMNode* childNode, [out, retval] IXMLDOMNode** oldChild);
    [id(0x00000010), helpstring("append a child node")]
    HRESULT _stdcall appendChild([in] IXMLDOMNode* newChild, [out, retval] IXMLDOMNode** outNewChild);
    [id(0x00000011)]
    HRESULT _stdcall hasChildNodes([out, retval] VARIANT_BOOL* hasChild);
    [propget, id(0x00000012), helpstring("document that contains the node")]
    HRESULT _stdcall ownerDocument([out, retval] IXMLDOMDocument** XMLDOMDocument);
    [id(0x00000013)]
    HRESULT _stdcall cloneNode([in] VARIANT_BOOL deep, [out, retval] IXMLDOMNode** cloneRoot);
    [propget, id(0x00000015), helpstring("the type of node in string form")]
    HRESULT _stdcall nodeTypeString([out, retval] BSTR* nodeType);
    [propget, id(0x00000018), helpstring("text content of the node and subtree")]
    HRESULT _stdcall text([out, retval] BSTR* text);
    [propput, id(0x00000018), helpstring("text content of the node and subtree")]
    HRESULT _stdcall text([in] BSTR text);
    [propget, id(0x00000016), helpstring("indicates whether node is a default value")]
    HRESULT _stdcall specified([out, retval] VARIANT_BOOL* isSpecified);
    [propget, id(0x00000017), helpstring("pointer to the definition of the node in the DTD or schema")]
    HRESULT _stdcall definition([out, retval] IXMLDOMNode** definitionNode);
    [propget, id(0x00000019), helpstring("get the strongly typed value of the node")]
    HRESULT _stdcall nodeTypedValue([out, retval] VARIANT* typedValue);
    [propput, id(0x00000019), helpstring("get the strongly typed value of the node")]
    HRESULT _stdcall nodeTypedValue([in] VARIANT typedValue);
    [propget, id(0x0000001A), helpstring("the data type of the node")]
    HRESULT _stdcall dataType([out, retval] VARIANT* dataTypeName);
    [propput, id(0x0000001A), helpstring("the data type of the node")]
    HRESULT _stdcall dataType([in] BSTR dataTypeName);
    [propget, id(0x0000001B), helpstring("return the XML source for the node and each of its descendants")]
    HRESULT _stdcall xml([out, retval] BSTR* xmlString);
    [id(0x0000001C), helpstring("apply the stylesheet to the subtree")]
    HRESULT _stdcall transformNode([in] IXMLDOMNode* stylesheet, [out, retval] BSTR* xmlString);
    [id(0x0000001D), helpstring("execute query on the subtree")]
    HRESULT _stdcall selectNodes([in] BSTR queryString, [out, retval] IXMLDOMNodeList** resultList);
    [id(0x0000001E), helpstring("execute query on the subtree")]
    HRESULT _stdcall selectSingleNode([in] BSTR queryString, [out, retval] IXMLDOMNode** resultNode);
    [propget, id(0x0000001F), helpstring("has sub-tree been completely parsed")]
    HRESULT _stdcall parsed([out, retval] VARIANT_BOOL* isParsed);
    [propget, id(0x00000020), helpstring("the URI for the namespace applying to the node")]
    HRESULT _stdcall namespaceURI([out, retval] BSTR* namespaceURI);
    [propget, id(0x00000021), helpstring("the prefix for the namespace applying to the node")]
    HRESULT _stdcall prefix([out, retval] BSTR* prefixString);
    [propget, id(0x00000022), helpstring("the base name of the node (nodename with the prefix stripped off)")]
    HRESULT _stdcall baseName([out, retval] BSTR* nameString);
    [id(0x00000023), helpstring("apply the stylesheet to the subtree, returning the result through a document or a stream")]
    HRESULT _stdcall transformNodeToObject([in] IXMLDOMNode* stylesheet, [in] VARIANT outputObject);
  };

  [
    uuid(2933BF82-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMNodeList: IDispatch
  {
    [propget, id(0x00000000), helpstring("collection of nodes")]
    HRESULT _stdcall item([in] long index, [out, retval] IXMLDOMNode** listItem);
    [propget, id(0x0000004A), helpstring("number of nodes in the collection")]
    HRESULT _stdcall length([out, retval] long* listLength);
    [id(0x0000004C), helpstring("get next node from iterator")]
    HRESULT _stdcall nextNode([out, retval] IXMLDOMNode** nextItem);
    [id(0x0000004D), helpstring("reset the position of iterator")]
    HRESULT _stdcall reset(void);
    [propget, id(0xFFFFFFFC), restricted, hidden]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown** ppUnk);
  };

  [
    uuid(2933BF83-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMNamedNodeMap: IDispatch
  {
    [id(0x00000053), helpstring("lookup item by name")]
    HRESULT _stdcall getNamedItem([in] BSTR name, [out, retval] IXMLDOMNode** namedItem);
    [id(0x00000054), helpstring("set item by name")]
    HRESULT _stdcall setNamedItem([in] IXMLDOMNode* newItem, [out, retval] IXMLDOMNode** nameItem);
    [id(0x00000055), helpstring("remove item by name")]
    HRESULT _stdcall removeNamedItem([in] BSTR name, [out, retval] IXMLDOMNode** namedItem);
    [propget, id(0x00000000), helpstring("collection of nodes")]
    HRESULT _stdcall item([in] long index, [out, retval] IXMLDOMNode** listItem);
    [propget, id(0x0000004A), helpstring("number of nodes in the collection")]
    HRESULT _stdcall length([out, retval] long* listLength);
    [id(0x00000057), helpstring("lookup the item by name and namespace")]
    HRESULT _stdcall getQualifiedItem([in] BSTR baseName, [in] BSTR namespaceURI, [out, retval] IXMLDOMNode** qualifiedItem);
    [id(0x00000058), helpstring("remove the item by name and namespace")]
    HRESULT _stdcall removeQualifiedItem([in] BSTR baseName, [in] BSTR namespaceURI, [out, retval] IXMLDOMNode** qualifiedItem);
    [id(0x00000059), helpstring("get next node from iterator")]
    HRESULT _stdcall nextNode([out, retval] IXMLDOMNode** nextItem);
    [id(0x0000005A), helpstring("reset the position of iterator")]
    HRESULT _stdcall reset(void);
    [propget, id(0xFFFFFFFC), restricted, hidden]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown** ppUnk);
  };

  [
    uuid(2933BF81-7B36-11D2-B20E-00C04F983E60), 
    hidden, 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMDocument: IXMLDOMNode
  {
    [propget, id(0x00000026), helpstring("node corresponding to the DOCTYPE")]
    HRESULT _stdcall doctype([out, retval] IXMLDOMDocumentType** documentType);
    [propget, id(0x00000027), helpstring("info on this DOM implementation")]
    HRESULT _stdcall implementation([out, retval] IXMLDOMImplementation** impl);
    [propget, id(0x00000028), helpstring("the root of the tree")]
    HRESULT _stdcall documentElement([out, retval] IXMLDOMElement** DOMElement);
    [propputref, id(0x00000028), helpstring("the root of the tree")]
    HRESULT _stdcall documentElement([in] IXMLDOMElement* DOMElement);
    [id(0x00000029), helpstring("create an Element node")]
    HRESULT _stdcall createElement([in] BSTR tagName, [out, retval] IXMLDOMElement** element);
    [id(0x0000002A), helpstring("create a DocumentFragment node")]
    HRESULT _stdcall createDocumentFragment([out, retval] IXMLDOMDocumentFragment** docFrag);
    [id(0x0000002B), helpstring("create a text node")]
    HRESULT _stdcall createTextNode([in] BSTR data, [out, retval] IXMLDOMText** text);
    [id(0x0000002C), helpstring("create a comment node")]
    HRESULT _stdcall createComment([in] BSTR data, [out, retval] IXMLDOMComment** comment);
    [id(0x0000002D), helpstring("create a CDATA section node")]
    HRESULT _stdcall createCDATASection([in] BSTR data, [out, retval] IXMLDOMCDATASection** cdata);
    [id(0x0000002E), helpstring("create a processing instruction node")]
    HRESULT _stdcall createProcessingInstruction([in] BSTR target, [in] BSTR data, [out, retval] IXMLDOMProcessingInstruction** pi);
    [id(0x0000002F), helpstring("create an attribute node")]
    HRESULT _stdcall createAttribute([in] BSTR name, [out, retval] IXMLDOMAttribute** attribute);
    [id(0x00000031), helpstring("create an entity reference node")]
    HRESULT _stdcall createEntityReference([in] BSTR name, [out, retval] IXMLDOMEntityReference** entityRef);
    [id(0x00000032), helpstring("build a list of elements by name")]
    HRESULT _stdcall getElementsByTagName([in] BSTR tagName, [out, retval] IXMLDOMNodeList** resultList);
    [id(0x00000036), helpstring("create a node of the specified node type and name")]
    HRESULT _stdcall createNode([in] VARIANT type, [in] BSTR name, [in] BSTR namespaceURI, [out, retval] IXMLDOMNode** node);
    [id(0x00000038), helpstring("retrieve node from it's ID")]
    HRESULT _stdcall nodeFromID([in] BSTR idString, [out, retval] IXMLDOMNode** node);
    [id(0x0000003A), helpstring("load document from the specified XML source")]
    HRESULT _stdcall load([in] VARIANT xmlSource, [out, retval] VARIANT_BOOL* isSuccessful);
    [propget, id(0xFFFFFDF3), helpstring("get the state of the XML document")]
    HRESULT _stdcall readyState([out, retval] long* value);
    [propget, id(0x0000003B), helpstring("get the last parser error")]
    HRESULT _stdcall parseError([out, retval] IXMLDOMParseError** errorObj);
    [propget, id(0x0000003C), helpstring("get the URL for the loaded XML document")]
    HRESULT _stdcall url([out, retval] BSTR* urlString);
    [propget, id(0x0000003D), helpstring("flag for asynchronous download")]
    HRESULT _stdcall async([out, retval] VARIANT_BOOL* isAsync);
    [propput, id(0x0000003D), helpstring("flag for asynchronous download")]
    HRESULT _stdcall async([in] VARIANT_BOOL isAsync);
    [id(0x0000003E), helpstring("abort an asynchronous download")]
    HRESULT _stdcall abort(void);
    [id(0x0000003F), helpstring("load the document from a string")]
    HRESULT _stdcall loadXML([in] BSTR bstrXML, [out, retval] VARIANT_BOOL* isSuccessful);
    [id(0x00000040), helpstring("save the document to a specified destination")]
    HRESULT _stdcall save([in] VARIANT destination);
    [propget, id(0x00000041), helpstring("indicates whether the parser performs validation")]
    HRESULT _stdcall validateOnParse([out, retval] VARIANT_BOOL* isValidating);
    [propput, id(0x00000041), helpstring("indicates whether the parser performs validation")]
    HRESULT _stdcall validateOnParse([in] VARIANT_BOOL isValidating);
    [propget, id(0x00000042), helpstring("indicates whether the parser resolves references to external DTD/Entities/Schema")]
    HRESULT _stdcall resolveExternals([out, retval] VARIANT_BOOL* isResolving);
    [propput, id(0x00000042), helpstring("indicates whether the parser resolves references to external DTD/Entities/Schema")]
    HRESULT _stdcall resolveExternals([in] VARIANT_BOOL isResolving);
    [propget, id(0x00000043), helpstring("indicates whether the parser preserves whitespace")]
    HRESULT _stdcall preserveWhiteSpace([out, retval] VARIANT_BOOL* isPreserving);
    [propput, id(0x00000043), helpstring("indicates whether the parser preserves whitespace")]
    HRESULT _stdcall preserveWhiteSpace([in] VARIANT_BOOL isPreserving);
    [propput, id(0x00000044), helpstring("register a readystatechange event handler")]
    HRESULT _stdcall onreadystatechange([in] VARIANT Param1);
    [propput, id(0x00000045), helpstring("register an ondataavailable event handler")]
    HRESULT _stdcall ondataavailable([in] VARIANT Param1);
    [propput, id(0x00000046), helpstring("register an ontransformnode event handler")]
    HRESULT _stdcall ontransformnode([in] VARIANT Param1);
  };

  [
    uuid(2933BF8B-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMDocumentType: IXMLDOMNode
  {
    [propget, id(0x00000083), helpstring("name of the document type (root of the tree)")]
    HRESULT _stdcall name([out, retval] BSTR* rootName);
    [propget, id(0x00000084), helpstring("a list of entities in the document")]
    HRESULT _stdcall entities([out, retval] IXMLDOMNamedNodeMap** entityMap);
    [propget, id(0x00000085), helpstring("a list of notations in the document")]
    HRESULT _stdcall notations([out, retval] IXMLDOMNamedNodeMap** notationMap);
  };

  [
    uuid(2933BF8F-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMImplementation: IDispatch
  {
    [id(0x00000091)]
    HRESULT _stdcall hasFeature([in] BSTR feature, [in] BSTR version, [out, retval] VARIANT_BOOL* hasFeature);
  };

  [
    uuid(2933BF86-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMElement: IXMLDOMNode
  {
    [propget, id(0x00000061), helpstring("get the tagName of the element")]
    HRESULT _stdcall tagName([out, retval] BSTR* tagName);
    [id(0x00000063), helpstring("look up the string value of an attribute by name")]
    HRESULT _stdcall getAttribute([in] BSTR name, [out, retval] VARIANT* value);
    [id(0x00000064), helpstring("set the string value of an attribute by name")]
    HRESULT _stdcall setAttribute([in] BSTR name, [in] VARIANT value);
    [id(0x00000065), helpstring("remove an attribute by name")]
    HRESULT _stdcall removeAttribute([in] BSTR name);
    [id(0x00000066), helpstring("look up the attribute node by name")]
    HRESULT _stdcall getAttributeNode([in] BSTR name, [out, retval] IXMLDOMAttribute** attributeNode);
    [id(0x00000067), helpstring("set the specified attribute on the element")]
    HRESULT _stdcall setAttributeNode([in] IXMLDOMAttribute* DOMAttribute, [out, retval] IXMLDOMAttribute** attributeNode);
    [id(0x00000068), helpstring("remove the specified attribute")]
    HRESULT _stdcall removeAttributeNode([in] IXMLDOMAttribute* DOMAttribute, [out, retval] IXMLDOMAttribute** attributeNode);
    [id(0x00000069), helpstring("build a list of elements by name")]
    HRESULT _stdcall getElementsByTagName([in] BSTR tagName, [out, retval] IXMLDOMNodeList** resultList);
    [id(0x0000006A), helpstring("collapse all adjacent text nodes in sub-tree")]
    HRESULT _stdcall normalize(void);
  };

  [
    uuid(2933BF85-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMAttribute: IXMLDOMNode
  {
    [propget, id(0x00000076), helpstring("get name of the attribute")]
    HRESULT _stdcall name([out, retval] BSTR* attributeName);
    [propget, id(0x00000078), helpstring("string value of the attribute")]
    HRESULT _stdcall value([out, retval] VARIANT* attributeValue);
    [propput, id(0x00000078), helpstring("string value of the attribute")]
    HRESULT _stdcall value([in] VARIANT attributeValue);
  };

  [
    uuid(3EFAA413-272F-11D2-836F-0000F87A7782), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMDocumentFragment: IXMLDOMNode
  {
  };

  [
    uuid(2933BF87-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMText: IXMLDOMCharacterData
  {
    [id(0x0000007B), helpstring("split the text node into two text nodes at the position specified")]
    HRESULT _stdcall splitText([in] long offset, [out, retval] IXMLDOMText** rightHandTextNode);
  };

  [
    uuid(2933BF84-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMCharacterData: IXMLDOMNode
  {
    [propget, id(0x0000006D), helpstring("value of the node")]
    HRESULT _stdcall data([out, retval] BSTR* data);
    [propput, id(0x0000006D), helpstring("value of the node")]
    HRESULT _stdcall data([in] BSTR data);
    [propget, id(0x0000006E), helpstring("number of characters in value")]
    HRESULT _stdcall length([out, retval] long* dataLength);
    [id(0x0000006F), helpstring("retrieve substring of value")]
    HRESULT _stdcall substringData([in] long offset, [in] long count, [out, retval] BSTR* data);
    [id(0x00000070), helpstring("append string to value")]
    HRESULT _stdcall appendData([in] BSTR data);
    [id(0x00000071), helpstring("insert string into value")]
    HRESULT _stdcall insertData([in] long offset, [in] BSTR data);
    [id(0x00000072), helpstring("delete string within the value")]
    HRESULT _stdcall deleteData([in] long offset, [in] long count);
    [id(0x00000073), helpstring("replace string within the value")]
    HRESULT _stdcall replaceData([in] long offset, [in] long count, [in] BSTR data);
  };

  [
    uuid(2933BF88-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMComment: IXMLDOMCharacterData
  {
  };

  [
    uuid(2933BF8A-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMCDATASection: IXMLDOMText
  {
  };

  [
    uuid(2933BF89-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMProcessingInstruction: IXMLDOMNode
  {
    [propget, id(0x0000007F), helpstring("the target")]
    HRESULT _stdcall target([out, retval] BSTR* name);
    [propget, id(0x00000080), helpstring("the data")]
    HRESULT _stdcall data([out, retval] BSTR* value);
    [propput, id(0x00000080), helpstring("the data")]
    HRESULT _stdcall data([in] BSTR value);
  };

  [
    uuid(2933BF8E-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMEntityReference: IXMLDOMNode
  {
  };

  [
    uuid(3EFAA426-272F-11D2-836F-0000F87A7782), 
    helpstring("structure for reporting parser errors"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMParseError: IDispatch
  {
    [propget, id(0x00000000), helpstring("the error code")]
    HRESULT _stdcall errorCode([out, retval] long* errorCode);
    [propget, id(0x000000B3), helpstring("the URL of the XML document containing the error")]
    HRESULT _stdcall url([out, retval] BSTR* urlString);
    [propget, id(0x000000B4), helpstring("the cause of the error")]
    HRESULT _stdcall reason([out, retval] BSTR* reasonString);
    [propget, id(0x000000B5), helpstring("the data where the error occurred")]
    HRESULT _stdcall srcText([out, retval] BSTR* sourceString);
    [propget, id(0x000000B6), helpstring("the line number in the XML document where the error occurred")]
    HRESULT _stdcall line([out, retval] long* lineNumber);
    [propget, id(0x000000B7), helpstring("the character position in the line containing the error")]
    HRESULT _stdcall linepos([out, retval] long* linePosition);
    [propget, id(0x000000B8), helpstring("the absolute file position in the XML document containing the error")]
    HRESULT _stdcall filepos([out, retval] long* filePosition);
  };

  [
    uuid(2933BF8C-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMNotation: IXMLDOMNode
  {
    [propget, id(0x00000088), helpstring("the public ID")]
    HRESULT _stdcall publicId([out, retval] VARIANT* publicId);
    [propget, id(0x00000089), helpstring("the system ID")]
    HRESULT _stdcall systemId([out, retval] VARIANT* systemId);
  };

  [
    uuid(2933BF8D-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMEntity: IXMLDOMNode
  {
    [propget, id(0x0000008C), helpstring("the public ID")]
    HRESULT _stdcall publicId([out, retval] VARIANT* publicId);
    [propget, id(0x0000008D), helpstring("the system ID")]
    HRESULT _stdcall systemId([out, retval] VARIANT* systemId);
    [propget, id(0x0000008E), helpstring("the name of the notation")]
    HRESULT _stdcall notationName([out, retval] BSTR* name);
  };

  [
    uuid(3EFAA428-272F-11D2-836F-0000F87A7782), 
    helpstring("structure for reporting parser errors"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMParseError2: IXMLDOMParseError
  {
    [propget, id(0x000000BE)]
    HRESULT _stdcall errorXPath([out, retval] BSTR* xpathexpr);
    [propget, id(0x000000BB)]
    HRESULT _stdcall allErrors([out, retval] IXMLDOMParseErrorCollection** allErrors);
    [id(0x000000BC)]
    HRESULT _stdcall errorParameters([in] long index, [out, retval] BSTR* param);
    [propget, id(0x000000BD)]
    HRESULT _stdcall errorParametersCount([out, retval] long* count);
  };

  [
    uuid(3EFAA429-272F-11D2-836F-0000F87A7782), 
    helpstring("structure for reporting parser errors"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMParseErrorCollection: IDispatch
  {
    [propget, id(0x00000000)]
    HRESULT _stdcall item([in] long index, [out, retval] IXMLDOMParseError2** error);
    [propget, id(0x000000C1)]
    HRESULT _stdcall length([out, retval] long* length);
    [propget, id(0x000000C2)]
    HRESULT _stdcall next([out, retval] IXMLDOMParseError2** error);
    [id(0x000000C3)]
    HRESULT _stdcall reset(void);
    [propget, id(0xFFFFFFFC), restricted, hidden]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown** ppUnk);
  };

  [
    uuid(3EFAA425-272F-11D2-836F-0000F87A7782), 
    helpstring("XTL runtime object"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXTLRuntime: IXMLDOMNode
  {
    [id(0x000000BB)]
    HRESULT _stdcall uniqueID([in] IXMLDOMNode* pNode, [out, retval] long* pID);
    [id(0x000000BC)]
    HRESULT _stdcall depth([in] IXMLDOMNode* pNode, [out, retval] long* pDepth);
    [id(0x000000BD)]
    HRESULT _stdcall childNumber([in] IXMLDOMNode* pNode, [out, retval] long* pNumber);
    [id(0x000000BE)]
    HRESULT _stdcall ancestorChildNumber([in] BSTR bstrNodeName, [in] IXMLDOMNode* pNode, [out, retval] long* pNumber);
    [id(0x000000BF)]
    HRESULT _stdcall absoluteChildNumber([in] IXMLDOMNode* pNode, [out, retval] long* pNumber);
    [id(0x000000C0)]
    HRESULT _stdcall formatIndex([in] long lIndex, [in] BSTR bstrFormat, [out, retval] BSTR* pbstrFormattedString);
    [id(0x000000C1)]
    HRESULT _stdcall formatNumber([in] double dblNumber, [in] BSTR bstrFormat, [out, retval] BSTR* pbstrFormattedString);
    [id(0x000000C2)]
    HRESULT _stdcall formatDate([in] VARIANT varDate, [in] BSTR bstrFormat, [in, optional] VARIANT varDestLocale, [out, retval] BSTR* pbstrFormattedString);
    [id(0x000000C3)]
    HRESULT _stdcall formatTime([in] VARIANT varTime, [in] BSTR bstrFormat, [in, optional] VARIANT varDestLocale, [out, retval] BSTR* pbstrFormattedString);
  };

  [
    uuid(A4F96ED0-F829-476E-81C0-CDC7BD2A0802), 
    helpstring("ISAXXMLReader interface"), 
    hidden
  ]
  interface ISAXXMLReader: IUnknown
  {
    [id(0x60010000)]
    HRESULT _stdcall getFeature([in] unsigned short* pwchName, [out, retval] VARIANT_BOOL* pvfValue);
    [id(0x60010001)]
    HRESULT _stdcall putFeature([in] unsigned short* pwchName, [in] VARIANT_BOOL vfValue);
    [id(0x60010002)]
    HRESULT _stdcall getProperty([in] unsigned short* pwchName, [out, retval] VARIANT* pvarValue);
    [id(0x60010003)]
    HRESULT _stdcall putProperty([in] unsigned short* pwchName, [in] VARIANT varValue);
    [id(0x60010004)]
    HRESULT _stdcall getEntityResolver([out, retval] ISAXEntityResolver** ppResolver);
    [id(0x60010005)]
    HRESULT _stdcall putEntityResolver([in] ISAXEntityResolver* pResolver);
    [id(0x60010006)]
    HRESULT _stdcall getContentHandler([out, retval] ISAXContentHandler** ppHandler);
    [id(0x60010007)]
    HRESULT _stdcall putContentHandler([in] ISAXContentHandler* pHandler);
    [id(0x60010008)]
    HRESULT _stdcall getDTDHandler([out, retval] ISAXDTDHandler** ppHandler);
    [id(0x60010009)]
    HRESULT _stdcall putDTDHandler([in] ISAXDTDHandler* pHandler);
    [id(0x6001000A)]
    HRESULT _stdcall getErrorHandler([out, retval] ISAXErrorHandler** ppHandler);
    [id(0x6001000B)]
    HRESULT _stdcall putErrorHandler([in] ISAXErrorHandler* pHandler);
    [id(0x6001000C)]
    HRESULT _stdcall getBaseURL([out, retval] unsigned short** ppwchBaseUrl);
    [id(0x6001000D)]
    HRESULT _stdcall putBaseURL([in] unsigned short* pwchBaseUrl);
    [id(0x6001000E)]
    HRESULT _stdcall getSecureBaseURL([out, retval] unsigned short** ppwchSecureBaseUrl);
    [id(0x6001000F)]
    HRESULT _stdcall putSecureBaseURL([in] unsigned short* pwchSecureBaseUrl);
    [id(0x60010010)]
    HRESULT _stdcall parse([in, optional] VARIANT varInput);
    [id(0x60010011)]
    HRESULT _stdcall parseURL([in] unsigned short* pwchUrl);
  };

  [
    uuid(99BCA7BD-E8C4-4D5F-A0CF-6D907901FF07), 
    helpstring("ISAXEntityResolver interface"), 
    hidden
  ]
  interface ISAXEntityResolver: IUnknown
  {
    [id(0x60010000)]
    HRESULT _stdcall resolveEntity([in] unsigned short* pwchPublicId, [in] unsigned short* pwchSystemId, [out, retval] VARIANT* pvarInput);
  };

  [
    uuid(1545CDFA-9E4E-4497-A8A4-2BF7D0112C44), 
    helpstring("ISAXContentHandler interface"), 
    hidden
  ]
  interface ISAXContentHandler: IUnknown
  {
    [id(0x60010000)]
    HRESULT _stdcall putDocumentLocator([in] ISAXLocator* pLocator);
    [id(0x60010001)]
    HRESULT _stdcall startDocument(void);
    [id(0x60010002)]
    HRESULT _stdcall endDocument(void);
    [id(0x60010003)]
    HRESULT _stdcall startPrefixMapping([in] unsigned short* pwchPrefix, [in] int cchPrefix, [in] unsigned short* pwchUri, [in] int cchUri);
    [id(0x60010004)]
    HRESULT _stdcall endPrefixMapping([in] unsigned short* pwchPrefix, [in] int cchPrefix);
    [id(0x60010005)]
    HRESULT _stdcall startElement([in] unsigned short* pwchNamespaceUri, [in] int cchNamespaceUri, [in] unsigned short* pwchLocalName, [in] int cchLocalName, [in] unsigned short* pwchQName, [in] int cchQName, [in] ISAXAttributes* pAttributes);
    [id(0x60010006)]
    HRESULT _stdcall endElement([in] unsigned short* pwchNamespaceUri, [in] int cchNamespaceUri, [in] unsigned short* pwchLocalName, [in] int cchLocalName, [in] unsigned short* pwchQName, [in] int cchQName);
    [id(0x60010007)]
    HRESULT _stdcall characters([in] unsigned short* pwchChars, [in] int cchChars);
    [id(0x60010008)]
    HRESULT _stdcall ignorableWhitespace([in] unsigned short* pwchChars, [in] int cchChars);
    [id(0x60010009)]
    HRESULT _stdcall processingInstruction([in] unsigned short* pwchTarget, [in] int cchTarget, [in] unsigned short* pwchData, [in] int cchData);
    [id(0x6001000A)]
    HRESULT _stdcall skippedEntity([in] unsigned short* pwchName, [in] int cchName);
  };

  [
    uuid(9B7E472A-0DE4-4640-BFF3-84D38A051C31), 
    helpstring("ISAXLocator interface"), 
    hidden
  ]
  interface ISAXLocator: IUnknown
  {
    [id(0x60010000)]
    HRESULT _stdcall getColumnNumber([out, retval] int* pnColumn);
    [id(0x60010001)]
    HRESULT _stdcall getLineNumber([out, retval] int* pnLine);
    [id(0x60010002)]
    HRESULT _stdcall getPublicId([out, retval] unsigned short** ppwchPublicId);
    [id(0x60010003)]
    HRESULT _stdcall getSystemId([out, retval] unsigned short** ppwchSystemId);
  };

  [
    uuid(F078ABE1-45D2-4832-91EA-4466CE2F25C9), 
    helpstring("ISAXAttributes interface"), 
    hidden
  ]
  interface ISAXAttributes: IUnknown
  {
    [id(0x60010000)]
    HRESULT _stdcall getLength([out, retval] int* pnLength);
    [id(0x60010001)]
    HRESULT _stdcall getURI([in] int nIndex, [out] unsigned short** ppwchUri, [out] int* pcchUri);
    [id(0x60010002)]
    HRESULT _stdcall getLocalName([in] int nIndex, [out] unsigned short** ppwchLocalName, [out] int* pcchLocalName);
    [id(0x60010003)]
    HRESULT _stdcall getQName([in] int nIndex, [out] unsigned short** ppwchQName, [out] int* pcchQName);
    [id(0x60010004)]
    HRESULT _stdcall getName([in] int nIndex, [out] unsigned short** ppwchUri, [out] int* pcchUri, [out] unsigned short** ppwchLocalName, [out] int* pcchLocalName, [out] unsigned short** ppwchQName, [out] int* pcchQName);
    [id(0x60010005)]
    HRESULT _stdcall getIndexFromName([in] unsigned short* pwchUri, [in] int cchUri, [in] unsigned short* pwchLocalName, [in] int cchLocalName, [out, retval] int* pnIndex);
    [id(0x60010006)]
    HRESULT _stdcall getIndexFromQName([in] unsigned short* pwchQName, [in] int cchQName, [out, retval] int* pnIndex);
    [id(0x60010007)]
    HRESULT _stdcall getType([in] int nIndex, [out] unsigned short** ppwchType, [out] int* pcchType);
    [id(0x60010008)]
    HRESULT _stdcall getTypeFromName([in] unsigned short* pwchUri, [in] int cchUri, [in] unsigned short* pwchLocalName, [in] int cchLocalName, [out] unsigned short** ppwchType, [out] int* pcchType);
    [id(0x60010009)]
    HRESULT _stdcall getTypeFromQName([in] unsigned short* pwchQName, [in] int cchQName, [out] unsigned short** ppwchType, [out] int* pcchType);
    [id(0x6001000A)]
    HRESULT _stdcall getValue([in] int nIndex, [out] unsigned short** ppwchValue, [out] int* pcchValue);
    [id(0x6001000B)]
    HRESULT _stdcall getValueFromName([in] unsigned short* pwchUri, [in] int cchUri, [in] unsigned short* pwchLocalName, [in] int cchLocalName, [out] unsigned short** ppwchValue, [out] int* pcchValue);
    [id(0x6001000C)]
    HRESULT _stdcall getValueFromQName([in] unsigned short* pwchQName, [in] int cchQName, [out] unsigned short** ppwchValue, [out] int* pcchValue);
  };

  [
    uuid(E15C1BAF-AFB3-4D60-8C36-19A8C45DEFED), 
    helpstring("ISAXDTDHandler interface"), 
    hidden
  ]
  interface ISAXDTDHandler: IUnknown
  {
    [id(0x60010000)]
    HRESULT _stdcall notationDecl([in] unsigned short* pwchName, [in] int cchName, [in] unsigned short* pwchPublicId, [in] int cchPublicId, [in] unsigned short* pwchSystemId, [in] int cchSystemId);
    [id(0x60010001)]
    HRESULT _stdcall unparsedEntityDecl([in] unsigned short* pwchName, [in] int cchName, [in] unsigned short* pwchPublicId, [in] int cchPublicId, [in] unsigned short* pwchSystemId, [in] int cchSystemId, [in] unsigned short* pwchNotationName, [in] int cchNotationName);
  };

  [
    uuid(A60511C4-CCF5-479E-98A3-DC8DC545B7D0), 
    helpstring("ISAXErrorHandler interface"), 
    hidden
  ]
  interface ISAXErrorHandler: IUnknown
  {
    [id(0x60010000)]
    HRESULT _stdcall error([in] ISAXLocator* pLocator, [in] unsigned short* pwchErrorMessage, [in] HRESULT hrErrorCode);
    [id(0x60010001)]
    HRESULT _stdcall fatalError([in] ISAXLocator* pLocator, [in] unsigned short* pwchErrorMessage, [in] HRESULT hrErrorCode);
    [id(0x60010002)]
    HRESULT _stdcall ignorableWarning([in] ISAXLocator* pLocator, [in] unsigned short* pwchErrorMessage, [in] HRESULT hrErrorCode);
  };

  [
    uuid(70409222-CA09-4475-ACB8-40312FE8D145), 
    helpstring("ISAXXMLFilter interface"), 
    hidden
  ]
  interface ISAXXMLFilter: ISAXXMLReader
  {
    [id(0x60020000)]
    HRESULT _stdcall getParent([out, retval] ISAXXMLReader** ppReader);
    [id(0x60020001)]
    HRESULT _stdcall putParent([in] ISAXXMLReader* pReader);
  };

  [
    uuid(1299EB1B-5B88-433E-82DE-82CA75AD4E04), 
    helpstring("IVBSAXXMLFilter interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IVBSAXXMLFilter: IDispatch
  {
    [propget, id(0x0000051D), helpstring("Set or get the parent reader")]
    HRESULT _stdcall parent([out, retval] IVBSAXXMLReader** oReader);
    [propputref, id(0x0000051D), helpstring("Set or get the parent reader")]
    HRESULT _stdcall parent([in] IVBSAXXMLReader* oReader);
  };

  [
    uuid(8C033CAA-6CD6-4F73-B728-4531AF74945F), 
    helpstring("IVBSAXXMLReader interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IVBSAXXMLReader: IDispatch
  {
    [id(0x00000502), helpstring("Look up the value of a feature.")]
    HRESULT _stdcall getFeature([in] BSTR strName, [out, retval] VARIANT_BOOL* fValue);
    [id(0x00000503), helpstring("Set the state of a feature.")]
    HRESULT _stdcall putFeature([in] BSTR strName, [in] VARIANT_BOOL fValue);
    [id(0x00000504), helpstring("Look up the value of a property.")]
    HRESULT _stdcall getProperty([in] BSTR strName, [out, retval] VARIANT* varValue);
    [id(0x00000505), helpstring("Set the value of a property.")]
    HRESULT _stdcall putProperty([in] BSTR strName, [in] VARIANT varValue);
    [propget, id(0x00000506), helpstring("Allow an application to register an entity resolver or look up the current entity resolver.")]
    HRESULT _stdcall entityResolver([out, retval] IVBSAXEntityResolver** oResolver);
    [propputref, id(0x00000506), helpstring("Allow an application to register an entity resolver or look up the current entity resolver.")]
    HRESULT _stdcall entityResolver([in] IVBSAXEntityResolver* oResolver);
    [propget, id(0x00000507), helpstring("Allow an application to register a content event handler or look up the current content event handler.")]
    HRESULT _stdcall contentHandler([out, retval] IVBSAXContentHandler** oHandler);
    [propputref, id(0x00000507), helpstring("Allow an application to register a content event handler or look up the current content event handler.")]
    HRESULT _stdcall contentHandler([in] IVBSAXContentHandler* oHandler);
    [propget, id(0x00000508), helpstring("Allow an application to register a DTD event handler or look up the current DTD event handler.")]
    HRESULT _stdcall dtdHandler([out, retval] IVBSAXDTDHandler** oHandler);
    [propputref, id(0x00000508), helpstring("Allow an application to register a DTD event handler or look up the current DTD event handler.")]
    HRESULT _stdcall dtdHandler([in] IVBSAXDTDHandler* oHandler);
    [propget, id(0x00000509), helpstring("Allow an application to register an error event handler or look up the current error event handler.")]
    HRESULT _stdcall errorHandler([out, retval] IVBSAXErrorHandler** oHandler);
    [propputref, id(0x00000509), helpstring("Allow an application to register an error event handler or look up the current error event handler.")]
    HRESULT _stdcall errorHandler([in] IVBSAXErrorHandler* oHandler);
    [propget, id(0x0000050A), helpstring("Set or get the base URL for the document.")]
    HRESULT _stdcall baseURL([out, retval] BSTR* strBaseURL);
    [propput, id(0x0000050A), helpstring("Set or get the base URL for the document.")]
    HRESULT _stdcall baseURL([in] BSTR strBaseURL);
    [propget, id(0x0000050B), helpstring("Set or get the secure base URL for the document.")]
    HRESULT _stdcall secureBaseURL([out, retval] BSTR* strSecureBaseURL);
    [propput, id(0x0000050B), helpstring("Set or get the secure base URL for the document.")]
    HRESULT _stdcall secureBaseURL([in] BSTR strSecureBaseURL);
    [id(0x0000050C), helpstring("Parse an XML document.")]
    HRESULT _stdcall parse([in, optional] VARIANT varInput);
    [id(0x0000050D), helpstring("Parse an XML document from a system identifier (URI).")]
    HRESULT _stdcall parseURL([in] BSTR strURL);
  };

  [
    uuid(0C05D096-F45B-4ACA-AD1A-AA0BC25518DC), 
    helpstring("IVBSAXEntityResolver interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IVBSAXEntityResolver: IDispatch
  {
    [id(0x00000527), helpstring("Allow the application to resolve external entities.")]
    HRESULT _stdcall resolveEntity([in, out] BSTR* strPublicId, [in, out] BSTR* strSystemId, [out, retval] VARIANT* varInput);
  };

  [
    uuid(2ED7290A-4DD5-4B46-BB26-4E4155E77FAA), 
    helpstring("IVBSAXContentHandler interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IVBSAXContentHandler: IDispatch
  {
    [propputref, id(0x0000052A), helpstring("Receive an object for locating the origin of SAX document events.")]
    HRESULT _stdcall documentLocator([in] IVBSAXLocator* Param1);
    [id(0x0000052B), helpstring("Receive notification of the beginning of a document.")]
    HRESULT _stdcall startDocument(void);
    [id(0x0000052C), helpstring("Receive notification of the end of a document.")]
    HRESULT _stdcall endDocument(void);
    [id(0x0000052D), helpstring("Begin the scope of a prefix-URI Namespace mapping.")]
    HRESULT _stdcall startPrefixMapping([in, out] BSTR* strPrefix, [in, out] BSTR* strURI);
    [id(0x0000052E), helpstring("End the scope of a prefix-URI mapping.")]
    HRESULT _stdcall endPrefixMapping([in, out] BSTR* strPrefix);
    [id(0x0000052F), helpstring("Receive notification of the beginning of an element.")]
    HRESULT _stdcall startElement([in, out] BSTR* strNamespaceURI, [in, out] BSTR* strLocalName, [in, out] BSTR* strQName, [in] IVBSAXAttributes* oAttributes);
    [id(0x00000530), helpstring("Receive notification of the end of an element.")]
    HRESULT _stdcall endElement([in, out] BSTR* strNamespaceURI, [in, out] BSTR* strLocalName, [in, out] BSTR* strQName);
    [id(0x00000531), helpstring("Receive notification of character data.")]
    HRESULT _stdcall characters([in, out] BSTR* strChars);
    [id(0x00000532), helpstring("Receive notification of ignorable whitespace in element content.")]
    HRESULT _stdcall ignorableWhitespace([in, out] BSTR* strChars);
    [id(0x00000533), helpstring("Receive notification of a processing instruction.")]
    HRESULT _stdcall processingInstruction([in, out] BSTR* strTarget, [in, out] BSTR* strData);
    [id(0x00000534), helpstring("Receive notification of a skipped entity.")]
    HRESULT _stdcall skippedEntity([in, out] BSTR* strName);
  };

  [
    uuid(796E7AC5-5AA2-4EFF-ACAD-3FAAF01A3288), 
    helpstring("IVBSAXLocator interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IVBSAXLocator: IDispatch
  {
    [propget, id(0x00000521), helpstring("Get the column number where the current document event ends.")]
    HRESULT _stdcall columnNumber([out, retval] int* nColumn);
    [propget, id(0x00000522), helpstring("Get the line number where the current document event ends.")]
    HRESULT _stdcall lineNumber([out, retval] int* nLine);
    [propget, id(0x00000523), helpstring("Get the public identifier for the current document event.")]
    HRESULT _stdcall publicId([out, retval] BSTR* strPublicId);
    [propget, id(0x00000524), helpstring("Get the system identifier for the current document event.")]
    HRESULT _stdcall systemId([out, retval] BSTR* strSystemId);
  };

  [
    uuid(10DC0586-132B-4CAC-8BB3-DB00AC8B7EE0), 
    helpstring("IVBSAXAttributes interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IVBSAXAttributes: IDispatch
  {
    [propget, id(0x00000540), helpstring("Get the number of attributes in the list.")]
    HRESULT _stdcall length([out, retval] int* nLength);
    [id(0x00000541), helpstring("Look up an attribute's Namespace URI by index.")]
    HRESULT _stdcall getURI([in] int nIndex, [out, retval] BSTR* strURI);
    [id(0x00000542), helpstring("Look up an attribute's local name by index.")]
    HRESULT _stdcall getLocalName([in] int nIndex, [out, retval] BSTR* strLocalName);
    [id(0x00000543), helpstring("Look up an attribute's XML 1.0 qualified name by index.")]
    HRESULT _stdcall getQName([in] int nIndex, [out, retval] BSTR* strQName);
    [id(0x00000544), helpstring("Look up the index of an attribute by Namespace name.")]
    HRESULT _stdcall getIndexFromName([in] BSTR strURI, [in] BSTR strLocalName, [out, retval] int* nIndex);
    [id(0x00000545), helpstring("Look up the index of an attribute by XML 1.0 qualified name.")]
    HRESULT _stdcall getIndexFromQName([in] BSTR strQName, [out, retval] int* nIndex);
    [id(0x00000546), helpstring("Look up an attribute's type by index.")]
    HRESULT _stdcall getType([in] int nIndex, [out, retval] BSTR* strType);
    [id(0x00000547), helpstring("Look up an attribute's type by Namespace name.")]
    HRESULT _stdcall getTypeFromName([in] BSTR strURI, [in] BSTR strLocalName, [out, retval] BSTR* strType);
    [id(0x00000548), helpstring("Look up an attribute's type by XML 1.0 qualified name.")]
    HRESULT _stdcall getTypeFromQName([in] BSTR strQName, [out, retval] BSTR* strType);
    [id(0x00000549), helpstring("Look up an attribute's value by index.")]
    HRESULT _stdcall getValue([in] int nIndex, [out, retval] BSTR* strValue);
    [id(0x0000054A), helpstring("Look up an attribute's value by Namespace name.")]
    HRESULT _stdcall getValueFromName([in] BSTR strURI, [in] BSTR strLocalName, [out, retval] BSTR* strValue);
    [id(0x0000054B), helpstring("Look up an attribute's value by XML 1.0 qualified name.")]
    HRESULT _stdcall getValueFromQName([in] BSTR strQName, [out, retval] BSTR* strValue);
  };

  [
    uuid(24FB3297-302D-4620-BA39-3A732D850558), 
    helpstring("IVBSAXDTDHandler interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IVBSAXDTDHandler: IDispatch
  {
    [id(0x00000537), helpstring("Receive notification of a notation declaration event.")]
    HRESULT _stdcall notationDecl([in, out] BSTR* strName, [in, out] BSTR* strPublicId, [in, out] BSTR* strSystemId);
    [id(0x00000538), helpstring("Receive notification of an unparsed entity declaration event.")]
    HRESULT _stdcall unparsedEntityDecl([in, out] BSTR* strName, [in, out] BSTR* strPublicId, [in, out] BSTR* strSystemId, [in, out] BSTR* strNotationName);
  };

  [
    uuid(D963D3FE-173C-4862-9095-B92F66995F52), 
    helpstring("IVBSAXErrorHandler interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IVBSAXErrorHandler: IDispatch
  {
    [id(0x0000053B), helpstring("Receive notification of a recoverable error.")]
    HRESULT _stdcall error([in] IVBSAXLocator* oLocator, [in, out] BSTR* strErrorMessage, [in] long nErrorCode);
    [id(0x0000053C), helpstring("Receive notification of a non-recoverable error.")]
    HRESULT _stdcall fatalError([in] IVBSAXLocator* oLocator, [in, out] BSTR* strErrorMessage, [in] long nErrorCode);
    [id(0x0000053D), helpstring("Receive notification of an ignorable warning.")]
    HRESULT _stdcall ignorableWarning([in] IVBSAXLocator* oLocator, [in, out] BSTR* strErrorMessage, [in] long nErrorCode);
  };

  [
    uuid(808F4E35-8D5A-4FBE-8466-33A41279ED30), 
    helpstring("IMXReaderControl interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IMXReaderControl: IDispatch
  {
    [id(0x00000576), helpstring("Abort the reader")]
    HRESULT _stdcall abort(void);
    [id(0x00000577), helpstring("Resume the reader")]
    HRESULT _stdcall resume(void);
    [id(0x00000578), helpstring("Suspend the reader")]
    HRESULT _stdcall suspend(void);
  };

  [
    uuid(FA4BB38C-FAF9-4CCA-9302-D1DD0FE520DB), 
    helpstring("IMXSchemaDeclHandler interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IMXSchemaDeclHandler: IDispatch
  {
    [id(0x0000057B), helpstring("Access schema element declaration")]
    HRESULT _stdcall schemaElementDecl([in] ISchemaElement* oSchemaElement);
  };

  [
    uuid(50EA08B7-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schema Element"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface ISchemaElement: ISchemaParticle
  {
    [propget, id(0x000005C4)]
    HRESULT _stdcall type([out, retval] ISchemaType** type);
    [propget, id(0x000005BD)]
    HRESULT _stdcall scope([out, retval] ISchemaComplexType** scope);
    [propget, id(0x00000597)]
    HRESULT _stdcall defaultValue([out, retval] BSTR* defaultValue);
    [propget, id(0x0000059E)]
    HRESULT _stdcall fixedValue([out, retval] BSTR* fixedValue);
    [propget, id(0x000005A3)]
    HRESULT _stdcall isNillable([out, retval] VARIANT_BOOL* nillable);
    [propget, id(0x000005A1)]
    HRESULT _stdcall identityConstraints([out, retval] ISchemaItemCollection** constraints);
    [propget, id(0x000005BF)]
    HRESULT _stdcall substitutionGroup([out, retval] ISchemaElement** element);
    [propget, id(0x000005C0)]
    HRESULT _stdcall substitutionGroupExclusions([out, retval] SCHEMADERIVATIONMETHOD* exclusions);
    [propget, id(0x00000599)]
    HRESULT _stdcall disallowedSubstitutions([out, retval] SCHEMADERIVATIONMETHOD* disallowed);
    [propget, id(0x000005A2)]
    HRESULT _stdcall isAbstract([out, retval] VARIANT_BOOL* abstract);
    [propget, id(0x000005A4)]
    HRESULT _stdcall isReference([out, retval] VARIANT_BOOL* reference);
  };

  [
    uuid(50EA08B5-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schema Particle"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface ISchemaParticle: ISchemaItem
  {
    [propget, id(0x000005AF)]
    HRESULT _stdcall minOccurs([out, retval] VARIANT* minOccurs);
    [propget, id(0x000005AB)]
    HRESULT _stdcall maxOccurs([out, retval] VARIANT* maxOccurs);
  };

  [
    uuid(50EA08B3-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schema Item"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface ISchemaItem: IDispatch
  {
    [propget, id(0x000005B1)]
    HRESULT _stdcall name([out, retval] BSTR* name);
    [propget, id(0x000005B3)]
    HRESULT _stdcall namespaceURI([out, retval] BSTR* namespaceURI);
    [propget, id(0x000005BB)]
    HRESULT _stdcall schema([out, retval] ISchema** schema);
    [propget, id(0x000005A0)]
    HRESULT _stdcall id([out, retval] BSTR* id);
    [propget, id(0x000005A6)]
    HRESULT _stdcall itemType([out, retval] SOMITEMTYPE* itemType);
    [propget, id(0x000005C6)]
    HRESULT _stdcall unhandledAttributes([out, retval] IVBSAXAttributes** attributes);
    [id(0x000005CB)]
    HRESULT _stdcall writeAnnotation([in]  IUnknown* annotationSink, [out, retval] VARIANT_BOOL* isWritten);
  };

  [
    uuid(50EA08B4-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schema"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface ISchema: ISchemaItem
  {
    [propget, id(0x000005C2)]
    HRESULT _stdcall targetNamespace([out, retval] BSTR* targetNamespace);
    [propget, id(0x000005C9)]
    HRESULT _stdcall version([out, retval] BSTR* version);
    [propget, id(0x000005C5)]
    HRESULT _stdcall types([out, retval] ISchemaItemCollection** types);
    [propget, id(0x0000059A)]
    HRESULT _stdcall elements([out, retval] ISchemaItemCollection** elements);
    [propget, id(0x00000593)]
    HRESULT _stdcall attributes([out, retval] ISchemaItemCollection** attributes);
    [propget, id(0x00000592)]
    HRESULT _stdcall attributeGroups([out, retval] ISchemaItemCollection** attributeGroups);
    [propget, id(0x000005B0)]
    HRESULT _stdcall modelGroups([out, retval] ISchemaItemCollection** modelGroups);
    [propget, id(0x000005B4)]
    HRESULT _stdcall notations([out, retval] ISchemaItemCollection** notations);
    [propget, id(0x000005BC)]
    HRESULT _stdcall schemaLocations([out, retval] ISchemaStringCollection** schemaLocations);
  };

  [
    uuid(50EA08B2-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schema Item Collection"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface ISchemaItemCollection: IDispatch
  {
    [propget, id(0x00000000)]
    HRESULT _stdcall item([in] long index, [out, retval] ISchemaItem** item);
    [id(0x0000058F)]
    HRESULT _stdcall itemByName([in] BSTR name, [out, retval] ISchemaItem** item);
    [id(0x00000590)]
    HRESULT _stdcall itemByQName([in] BSTR name, [in] BSTR namespaceURI, [out, retval] ISchemaItem** item);
    [propget, id(0x000005A7)]
    HRESULT _stdcall length([out, retval] long* length);
    [propget, id(0xFFFFFFFC), restricted, hidden]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown** ppUnk);
  };

  [
    uuid(50EA08B1-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schema String Collection"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface ISchemaStringCollection: IDispatch
  {
    [propget, id(0x00000000)]
    HRESULT _stdcall item([in] long index, [out, retval] BSTR* bstr);
    [propget, id(0x000005A7)]
    HRESULT _stdcall length([out, retval] long* length);
    [propget, id(0xFFFFFFFC), restricted, hidden]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown** ppUnk);
  };

  [
    uuid(50EA08B8-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schema Type"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface ISchemaType: ISchemaItem
  {
    [propget, id(0x00000594)]
    HRESULT _stdcall baseTypes([out, retval] ISchemaItemCollection** baseTypes);
    [propget, id(0x0000059D)]
    HRESULT _stdcall final([out, retval] SCHEMADERIVATIONMETHOD* final);
    [propget, id(0x000005C8)]
    HRESULT _stdcall variety([out, retval] SCHEMATYPEVARIETY* variety);
    [propget, id(0x00000598)]
    HRESULT _stdcall derivedBy([out, retval] SCHEMADERIVATIONMETHOD* derivedBy);
    [id(0x000005A5)]
    HRESULT _stdcall isValid([in] BSTR data, [out, retval] VARIANT_BOOL* valid);
    [propget, id(0x000005AC)]
    HRESULT _stdcall minExclusive([out, retval] BSTR* minExclusive);
    [propget, id(0x000005AD)]
    HRESULT _stdcall minInclusive([out, retval] BSTR* minInclusive);
    [propget, id(0x000005A8)]
    HRESULT _stdcall maxExclusive([out, retval] BSTR* maxExclusive);
    [propget, id(0x000005A9)]
    HRESULT _stdcall maxInclusive([out, retval] BSTR* maxInclusive);
    [propget, id(0x000005C3)]
    HRESULT _stdcall totalDigits([out, retval] VARIANT* totalDigits);
    [propget, id(0x0000059F)]
    HRESULT _stdcall fractionDigits([out, retval] VARIANT* fractionDigits);
    [propget, id(0x000005A7)]
    HRESULT _stdcall length([out, retval] VARIANT* length);
    [propget, id(0x000005AE)]
    HRESULT _stdcall minLength([out, retval] VARIANT* minLength);
    [propget, id(0x000005AA)]
    HRESULT _stdcall maxLength([out, retval] VARIANT* maxLength);
    [propget, id(0x0000059B)]
    HRESULT _stdcall enumeration([out, retval] ISchemaStringCollection** enumeration);
    [propget, id(0x000005CA)]
    HRESULT _stdcall whitespace([out, retval] SCHEMAWHITESPACE* whitespace);
    [propget, id(0x000005B6)]
    HRESULT _stdcall patterns([out, retval] ISchemaStringCollection** patterns);
  };

  [
    uuid(50EA08B9-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schema Complex Type"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface ISchemaComplexType: ISchemaType
  {
    [propget, id(0x000005A2)]
    HRESULT _stdcall isAbstract([out, retval] VARIANT_BOOL* abstract);
    [propget, id(0x00000591)]
    HRESULT _stdcall anyAttribute([out, retval] ISchemaAny** anyAttribute);
    [propget, id(0x00000593)]
    HRESULT _stdcall attributes([out, retval] ISchemaItemCollection** attributes);
    [propget, id(0x00000596)]
    HRESULT _stdcall contentType([out, retval] SCHEMACONTENTTYPE* contentType);
    [propget, id(0x00000595)]
    HRESULT _stdcall contentModel([out, retval] ISchemaModelGroup** contentModel);
    [propget, id(0x000005B8)]
    HRESULT _stdcall prohibitedSubstitutions([out, retval] SCHEMADERIVATIONMETHOD* prohibited);
  };

  [
    uuid(50EA08BC-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schema Any"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface ISchemaAny: ISchemaParticle
  {
    [propget, id(0x000005B2)]
    HRESULT _stdcall namespaces([out, retval] ISchemaStringCollection** namespaces);
    [propget, id(0x000005B7)]
    HRESULT _stdcall processContents([out, retval] SCHEMAPROCESSCONTENTS* processContents);
  };

  [
    uuid(50EA08BB-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schema Type"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface ISchemaModelGroup: ISchemaParticle
  {
    [propget, id(0x000005B5)]
    HRESULT _stdcall particles([out, retval] ISchemaItemCollection** particles);
  };

  [
    uuid(C90352F7-643C-4FBC-BB23-E996EB2D51FD), 
    helpstring("IMXXMLFilter interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IMXXMLFilter: IDispatch
  {
    [id(0x0000058F)]
    HRESULT _stdcall getFeature([in] BSTR strName, [out, retval] VARIANT_BOOL* fValue);
    [id(0x00000591)]
    HRESULT _stdcall putFeature([in] BSTR strName, [in] VARIANT_BOOL fValue);
    [id(0x00000590)]
    HRESULT _stdcall getProperty([in] BSTR strName, [out, retval] VARIANT* varValue);
    [id(0x00000592)]
    HRESULT _stdcall putProperty([in] BSTR strName, [in] VARIANT varValue);
    [propget, id(0x0000058D)]
    HRESULT _stdcall entityResolver([out, retval]  IUnknown** oResolver);
    [propputref, id(0x0000058D)]
    HRESULT _stdcall entityResolver([in]  IUnknown* oResolver);
    [propget, id(0x0000058B)]
    HRESULT _stdcall contentHandler([out, retval]  IUnknown** oHandler);
    [propputref, id(0x0000058B)]
    HRESULT _stdcall contentHandler([in]  IUnknown* oHandler);
    [propget, id(0x0000058C)]
    HRESULT _stdcall dtdHandler([out, retval]  IUnknown** oHandler);
    [propputref, id(0x0000058C)]
    HRESULT _stdcall dtdHandler([in]  IUnknown* oHandler);
    [propget, id(0x0000058E)]
    HRESULT _stdcall errorHandler([out, retval]  IUnknown** oHandler);
    [propputref, id(0x0000058E)]
    HRESULT _stdcall errorHandler([in]  IUnknown* oHandler);
  };

  [
    uuid(50EA08B6-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schema Attribute"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface ISchemaAttribute: ISchemaItem
  {
    [propget, id(0x000005C4)]
    HRESULT _stdcall type([out, retval] ISchemaType** type);
    [propget, id(0x000005BD)]
    HRESULT _stdcall scope([out, retval] ISchemaComplexType** scope);
    [propget, id(0x00000597)]
    HRESULT _stdcall defaultValue([out, retval] BSTR* defaultValue);
    [propget, id(0x0000059E)]
    HRESULT _stdcall fixedValue([out, retval] BSTR* fixedValue);
    [propget, id(0x000005C7)]
    HRESULT _stdcall use([out, retval] SCHEMAUSE* use);
    [propget, id(0x000005A4)]
    HRESULT _stdcall isReference([out, retval] VARIANT_BOOL* reference);
  };

  [
    uuid(50EA08BA-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schema Attribute Group"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface ISchemaAttributeGroup: ISchemaItem
  {
    [propget, id(0x00000591)]
    HRESULT _stdcall anyAttribute([out, retval] ISchemaAny** anyAttribute);
    [propget, id(0x00000593)]
    HRESULT _stdcall attributes([out, retval] ISchemaItemCollection** attributes);
  };

  [
    uuid(50EA08BD-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schema Any"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface ISchemaIdentityConstraint: ISchemaItem
  {
    [propget, id(0x000005BE)]
    HRESULT _stdcall selector([out, retval] BSTR* selector);
    [propget, id(0x0000059C)]
    HRESULT _stdcall fields([out, retval] ISchemaStringCollection** fields);
    [propget, id(0x000005BA)]
    HRESULT _stdcall referencedKey([out, retval] ISchemaIdentityConstraint** key);
  };

  [
    uuid(50EA08BE-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schema Notation"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface ISchemaNotation: ISchemaItem
  {
    [propget, id(0x000005C1)]
    HRESULT _stdcall systemIdentifier([out, retval] BSTR* uri);
    [propget, id(0x000005B9)]
    HRESULT _stdcall publicIdentifier([out, retval] BSTR* uri);
  };

  [
    uuid(AA634FC7-5888-44A7-A257-3A47150D3A0E), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMSelection: IXMLDOMNodeList
  {
    [propget, id(0x00000051), helpstring("selection expression")]
    HRESULT _stdcall expr([out, retval] BSTR* expression);
    [propput, id(0x00000051), helpstring("selection expression")]
    HRESULT _stdcall expr([in] BSTR expression);
    [propget, id(0x00000052), helpstring("nodes to apply selection expression to")]
    HRESULT _stdcall context([out, retval] IXMLDOMNode** ppNode);
    [propputref, id(0x00000052), helpstring("nodes to apply selection expression to")]
    HRESULT _stdcall context([in] IXMLDOMNode* ppNode);
    [id(0x00000053), helpstring("gets the next node without advancing the list position")]
    HRESULT _stdcall peekNode([out, retval] IXMLDOMNode** ppNode);
    [id(0x00000054), helpstring("checks to see if the node matches the pattern")]
    HRESULT _stdcall matches([in] IXMLDOMNode* pNode, [out, retval] IXMLDOMNode** ppNode);
    [id(0x00000055), helpstring("removes the next node")]
    HRESULT _stdcall removeNext([out, retval] IXMLDOMNode** ppNode);
    [id(0x00000056), helpstring("removes all the nodes that match the selection")]
    HRESULT _stdcall removeAll(void);
    [id(0x00000057), helpstring("clone this object with the same position and context")]
    HRESULT _stdcall clone([out, retval] IXMLDOMSelection** ppNode);
    [id(0x00000058), helpstring("get the value of the named property")]
    HRESULT _stdcall getProperty([in] BSTR name, [out, retval] VARIANT* value);
    [id(0x00000059), helpstring("set the value of the named property")]
    HRESULT _stdcall setProperty([in] BSTR name, [in] VARIANT value);
  };

  [
    uuid(2933BF96-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMDocument3: IXMLDOMDocument2
  {
    [id(0x000000D0), helpstring("perform runtime validation on the currently loaded XML document node")]
    HRESULT _stdcall validateNode([in] IXMLDOMNode* node, [out, retval] IXMLDOMParseError** errorObj);
    [id(0x000000D1), helpstring("clone node such that clones ownerDocument is this document")]
    HRESULT _stdcall importNode([in] IXMLDOMNode* node, [in] VARIANT_BOOL deep, [out, retval] IXMLDOMNode** clone);
  };

  [
    uuid(2933BF95-7B36-11D2-B20E-00C04F983E60), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMDocument2: IXMLDOMDocument
  {
    [propget, id(0x000000C9), helpstring("A collection of all namespaces for this document")]
    HRESULT _stdcall namespaces([out, retval] IXMLDOMSchemaCollection** namespaceCollection);
    [propget, id(0x000000CA), helpstring("The associated schema cache")]
    HRESULT _stdcall schemas([out, retval] VARIANT* otherCollection);
    [propputref, id(0x000000CA), helpstring("The associated schema cache")]
    HRESULT _stdcall schemas([in] VARIANT otherCollection);
    [id(0x000000CB), helpstring("perform runtime validation on the currently loaded XML document")]
    HRESULT _stdcall validate([out, retval] IXMLDOMParseError** errorObj);
    [id(0x000000CC), helpstring("set the value of the named property")]
    HRESULT _stdcall setProperty([in] BSTR name, [in] VARIANT value);
    [id(0x000000CD), helpstring("get the value of the named property")]
    HRESULT _stdcall getProperty([in] BSTR name, [out, retval] VARIANT* value);
  };

  [
    uuid(373984C8-B845-449B-91E7-45AC83036ADE), 
    helpstring("XML Schemas Collection"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMSchemaCollection: IDispatch
  {
    [id(0x00000003), helpstring("add a new schema")]
    HRESULT _stdcall add([in] BSTR namespaceURI, [in] VARIANT var);
    [id(0x00000004), helpstring("lookup schema by namespaceURI")]
    HRESULT _stdcall get([in] BSTR namespaceURI, [out, retval] IXMLDOMNode** schemaNode);
    [id(0x00000005), helpstring("remove schema by namespaceURI")]
    HRESULT _stdcall remove([in] BSTR namespaceURI);
    [propget, id(0x00000006), helpstring("number of schemas in collection")]
    HRESULT _stdcall length([out, retval] long* length);
    [propget, id(0x00000000), helpstring("Get namespaceURI for schema by index")]
    HRESULT _stdcall namespaceURI([in] long index, [out, retval] BSTR* length);
    [id(0x00000008), helpstring("copy & merge other collection into this one")]
    HRESULT _stdcall addCollection([in] IXMLDOMSchemaCollection* otherCollection);
    [propget, id(0xFFFFFFFC), restricted, hidden]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown** ppUnk);
  };

  [
    uuid(50EA08B0-DD1B-4664-9A50-C2F40F4BD79A), 
    helpstring("XML Schemas Collection 2"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXMLDOMSchemaCollection2: IXMLDOMSchemaCollection
  {
    [id(0x0000058B)]
    HRESULT _stdcall validate(void);
    [propput, id(0x0000058C)]
    HRESULT _stdcall validateOnLoad([in] VARIANT_BOOL validateOnLoad);
    [propget, id(0x0000058C)]
    HRESULT _stdcall validateOnLoad([out, retval] VARIANT_BOOL* validateOnLoad);
    [id(0x0000058D)]
    HRESULT _stdcall getSchema([in] BSTR namespaceURI, [out, retval] ISchema** schema);
    [id(0x0000058E)]
    HRESULT _stdcall getDeclaration([in] IXMLDOMNode* node, [out, retval] ISchemaItem** item);
  };

  [
    uuid(2933BF93-7B36-11D2-B20E-00C04F983E60), 
    helpstring("IXSLTemplate Interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXSLTemplate: IDispatch
  {
    [propputref, id(0x00000002), helpstring("stylesheet to use with processors")]
    HRESULT _stdcall stylesheet([in] IXMLDOMNode* stylesheet);
    [propget, id(0x00000002), helpstring("stylesheet to use with processors")]
    HRESULT _stdcall stylesheet([out, retval] IXMLDOMNode** stylesheet);
    [id(0x00000003), helpstring("create a new processor object")]
    HRESULT _stdcall createProcessor([out, retval] IXSLProcessor** ppProcessor);
  };

  [
    uuid(2933BF92-7B36-11D2-B20E-00C04F983E60), 
    helpstring("IXSLProcessor Interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IXSLProcessor: IDispatch
  {
    [propput, id(0x00000002), helpstring("XML input tree to transform")]
    HRESULT _stdcall input([in] VARIANT pVar);
    [propget, id(0x00000002), helpstring("XML input tree to transform")]
    HRESULT _stdcall input([out, retval] VARIANT* pVar);
    [propget, id(0x00000003), helpstring("template object used to create this processor object")]
    HRESULT _stdcall ownerTemplate([out, retval] IXSLTemplate** ppTemplate);
    [id(0x00000004), helpstring("set XSL mode and it's namespace")]
    HRESULT _stdcall setStartMode([in] BSTR mode, [in, optional, defaultvalue("")] BSTR namespaceURI);
    [propget, id(0x00000005), helpstring("starting XSL mode")]
    HRESULT _stdcall startMode([out, retval] BSTR* mode);
    [propget, id(0x00000006), helpstring("namespace of starting XSL mode")]
    HRESULT _stdcall startModeURI([out, retval] BSTR* namespaceURI);
    [propput, id(0x00000007), helpstring("custom stream object for transform output")]
    HRESULT _stdcall output([in] VARIANT pOutput);
    [propget, id(0x00000007), helpstring("custom stream object for transform output")]
    HRESULT _stdcall output([out, retval] VARIANT* pOutput);
    [id(0x00000008), helpstring("start/resume the XSL transformation process")]
    HRESULT _stdcall transform([out, retval] VARIANT_BOOL* pDone);
    [id(0x00000009), helpstring("reset state of processor and abort current transform")]
    HRESULT _stdcall reset(void);
    [propget, id(0x0000000A), helpstring("current state of the processor")]
    HRESULT _stdcall readyState([out, retval] long* pReadyState);
    [id(0x0000000B), helpstring("set <xsl:param> values")]
    HRESULT _stdcall addParameter([in] BSTR baseName, [in] VARIANT parameter, [in, optional, defaultvalue("")] BSTR namespaceURI);
    [id(0x0000000C), helpstring("pass object to stylesheet")]
    HRESULT _stdcall addObject([in]  IDispatch* obj, [in] BSTR namespaceURI);
    [propget, id(0x0000000D), helpstring("current stylesheet being used")]
    HRESULT _stdcall stylesheet([out, retval] IXMLDOMNode** stylesheet);
  };

  [
    uuid(ED8C108D-4349-11D2-91A4-00C04F7969E8), 
    helpstring("IXMLHTTPRequest Interface"), 
    dual, 
    oleautomation
  ]
  interface IXMLHTTPRequest: IDispatch
  {
    [id(0x00000001), helpstring("Open HTTP connection")]
    HRESULT _stdcall open([in] BSTR bstrMethod, [in] BSTR bstrUrl, [in, optional] VARIANT varAsync, [in, optional] VARIANT bstrUser, [in, optional] VARIANT bstrPassword);
    [id(0x00000002), helpstring("Add HTTP request header")]
    HRESULT _stdcall setRequestHeader([in] BSTR bstrHeader, [in] BSTR bstrValue);
    [id(0x00000003), helpstring("Get HTTP response header")]
    HRESULT _stdcall getResponseHeader([in] BSTR bstrHeader, [out, retval] BSTR* pbstrValue);
    [id(0x00000004), helpstring("Get all HTTP response headers")]
    HRESULT _stdcall getAllResponseHeaders([out, retval] BSTR* pbstrHeaders);
    [id(0x00000005), helpstring("Send HTTP request")]
    HRESULT _stdcall send([in, optional] VARIANT varBody);
    [id(0x00000006), helpstring("Abort HTTP request")]
    HRESULT _stdcall abort(void);
    [propget, id(0x00000007), helpstring("Get HTTP status code")]
    HRESULT _stdcall status([out, retval] long* plStatus);
    [propget, id(0x00000008), helpstring("Get HTTP status text")]
    HRESULT _stdcall statusText([out, retval] BSTR* pbstrStatus);
    [propget, id(0x00000009), helpstring("Get response body")]
    HRESULT _stdcall responseXML([out, retval]  IDispatch** ppBody);
    [propget, id(0x0000000A), helpstring("Get response body")]
    HRESULT _stdcall responseText([out, retval] BSTR* pbstrBody);
    [propget, id(0x0000000B), helpstring("Get response body")]
    HRESULT _stdcall responseBody([out, retval] VARIANT* pvarBody);
    [propget, id(0x0000000C), helpstring("Get response body")]
    HRESULT _stdcall responseStream([out, retval] VARIANT* pvarBody);
    [propget, id(0x0000000D), helpstring("Get ready state")]
    HRESULT _stdcall readyState([out, retval] long* plState);
    [propput, id(0x0000000E), helpstring("Register a complete event handler")]
    HRESULT _stdcall onreadystatechange([in]  IDispatch* Param1);
  };

  [
    uuid(E5D37DC0-552A-4D52-9CC0-A14D546FBD04), 
    helpstring("IXMLHTTPRequest2 Interface")
  ]
  interface IXMLHTTPRequest2: IUnknown
  {
    [id(0x60010000)]
    HRESULT _stdcall open([in] LPWSTR pwszMethod, [in] LPWSTR pwszUrl, [in] IXMLHTTPRequest2Callback* pStatusCallback, [in] LPWSTR pwszUserName, [in] LPWSTR pwszPassword, [in] LPWSTR pwszProxyUserName, [in] LPWSTR pwszProxyPassword);
    [id(0x60010001)]
    HRESULT _stdcall send([in] ISequentialStream* pBody, [in] unsigned __int64 cbBody);
    [id(0x60010002)]
    HRESULT _stdcall abort(void);
    [id(0x60010003)]
    HRESULT _stdcall SetCookie([in] struct tagXHR_COOKIE* pCookie, [out] unsigned long* pdwCookieState);
    [id(0x60010004)]
    HRESULT _stdcall SetCustomResponseStream([in] ISequentialStream* pSequentialStream);
    [id(0x60010005)]
    HRESULT _stdcall setProperty([in] XHR_PROPERTY eProperty, [in] unsigned __int64 ullValue);
    [id(0x60010006)]
    HRESULT _stdcall setRequestHeader([in] LPWSTR pwszHeader, [in] LPWSTR pwszValue);
    [id(0x60010007)]
    HRESULT _stdcall getAllResponseHeaders([out] LPWSTR* ppwszHeaders);
    [id(0x60010008)]
    HRESULT _stdcall GetCookie([in] LPWSTR pwszUrl, [in] LPWSTR pwszName, [in] unsigned long dwFlags, [out] unsigned long* pcCookies, [out] struct tagXHR_COOKIE** ppCookies);
    [id(0x60010009)]
    HRESULT _stdcall getResponseHeader([in] LPWSTR pwszHeader, [out] LPWSTR* ppwszValue);
  };

  [
    uuid(A44A9299-E321-40DE-8866-341B41669162), 
    helpstring("IXMLHTTPRequest2Callback Interface")
  ]
  interface IXMLHTTPRequest2Callback: IUnknown
  {
    [id(0x60010000)]
    HRESULT _stdcall OnRedirect([in] IXMLHTTPRequest2* pXHR, [in] LPWSTR pwszRedirectUrl);
    [id(0x60010001)]
    HRESULT _stdcall OnHeadersAvailable([in] IXMLHTTPRequest2* pXHR, [in] unsigned long dwStatus, [in] LPWSTR pwszStatus);
    [id(0x60010002)]
    HRESULT _stdcall ondataavailable([in] IXMLHTTPRequest2* pXHR, [in] ISequentialStream* pResponseStream);
    [id(0x60010003)]
    HRESULT _stdcall OnResponseReceived([in] IXMLHTTPRequest2* pXHR, [in] ISequentialStream* pResponseStream);
    [id(0x60010004)]
    HRESULT _stdcall OnError([in] IXMLHTTPRequest2* pXHR, [in] HRESULT hrError);
  };

  

  [
    uuid(2E01311B-C322-4B0A-BD77-B90CFDC8DCE7), 
    helpstring("IServerXMLHTTPRequest2 Interface"), 
    dual, 
    oleautomation
  ]
  interface IServerXMLHTTPRequest2: IServerXMLHTTPRequest
  {
    [id(0x00000013), helpstring("Specify proxy configuration")]
    HRESULT _stdcall setProxy([in] SXH_PROXY_SETTING proxySetting, [in, optional] VARIANT varProxyServer, [in, optional] VARIANT varBypassList);
    [id(0x00000014), helpstring("Specify proxy authentication credentials")]
    HRESULT _stdcall setProxyCredentials([in] BSTR bstrUserName, [in] BSTR bstrPassword);
  };

  [
    uuid(2E9196BF-13BA-4DD4-91CA-6C571F281495), 
    helpstring("IServerXMLHTTPRequest Interface"), 
    dual, 
    oleautomation
  ]
  interface IServerXMLHTTPRequest: IXMLHTTPRequest
  {
    [id(0x0000000F), helpstring("Specify timeout settings (in milliseconds)")]
    HRESULT _stdcall setTimeouts([in] long resolveTimeout, [in] long connectTimeout, [in] long sendTimeout, [in] long receiveTimeout);
    [id(0x00000010), helpstring("Wait for asynchronous send to complete, with optional timeout (in seconds)")]
    HRESULT _stdcall waitForResponse([in, optional] VARIANT timeoutInSeconds, [out, retval] VARIANT_BOOL* isSuccessful);
    [id(0x00000011), helpstring("Get an option value")]
    HRESULT _stdcall getOption([in] SERVERXMLHTTP_OPTION option, [out, retval] VARIANT* value);
    [id(0x00000012), helpstring("Set an option value")]
    HRESULT _stdcall setOption([in] SERVERXMLHTTP_OPTION option, [in] VARIANT value);
  };

  [
    uuid(4D7FF4BA-1565-4EA8-94E1-6E724A46F98D), 
    helpstring("IMXWriter interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IMXWriter: IDispatch
  {
    [propput, id(0x00000569), helpstring("Set or get the output.")]
    HRESULT _stdcall output([in] VARIANT varDestination);
    [propget, id(0x00000569), helpstring("Set or get the output.")]
    HRESULT _stdcall output([out, retval] VARIANT* varDestination);
    [propput, id(0x0000056B), helpstring("Set or get the output encoding.")]
    HRESULT _stdcall encoding([in] BSTR strEncoding);
    [propget, id(0x0000056B), helpstring("Set or get the output encoding.")]
    HRESULT _stdcall encoding([out, retval] BSTR* strEncoding);
    [propput, id(0x0000056C), helpstring("Determine whether or not to write the byte order mark")]
    HRESULT _stdcall byteOrderMark([in] VARIANT_BOOL fWriteByteOrderMark);
    [propget, id(0x0000056C), helpstring("Determine whether or not to write the byte order mark")]
    HRESULT _stdcall byteOrderMark([out, retval] VARIANT_BOOL* fWriteByteOrderMark);
    [propput, id(0x0000056D), helpstring("Enable or disable auto indent mode.")]
    HRESULT _stdcall indent([in] VARIANT_BOOL fIndentMode);
    [propget, id(0x0000056D), helpstring("Enable or disable auto indent mode.")]
    HRESULT _stdcall indent([out, retval] VARIANT_BOOL* fIndentMode);
    [propput, id(0x0000056E), helpstring("Set or get the standalone document declaration.")]
    HRESULT _stdcall standalone([in] VARIANT_BOOL fValue);
    [propget, id(0x0000056E), helpstring("Set or get the standalone document declaration.")]
    HRESULT _stdcall standalone([out, retval] VARIANT_BOOL* fValue);
    [propput, id(0x0000056F), helpstring("Determine whether or not to omit the XML declaration.")]
    HRESULT _stdcall omitXMLDeclaration([in] VARIANT_BOOL fValue);
    [propget, id(0x0000056F), helpstring("Determine whether or not to omit the XML declaration.")]
    HRESULT _stdcall omitXMLDeclaration([out, retval] VARIANT_BOOL* fValue);
    [propput, id(0x00000570), helpstring("Set or get the xml version info.")]
    HRESULT _stdcall version([in] BSTR strVersion);
    [propget, id(0x00000570), helpstring("Set or get the xml version info.")]
    HRESULT _stdcall version([out, retval] BSTR* strVersion);
    [propput, id(0x00000571), helpstring("When enabled, the writer no longer escapes out its input when writing it out.")]
    HRESULT _stdcall disableOutputEscaping([in] VARIANT_BOOL fValue);
    [propget, id(0x00000571), helpstring("When enabled, the writer no longer escapes out its input when writing it out.")]
    HRESULT _stdcall disableOutputEscaping([out, retval] VARIANT_BOOL* fValue);
    [id(0x00000572), helpstring("Flushes all writer buffers forcing the writer to write to the underlying output object")]
    HRESULT _stdcall flush(void);
  };

  [
    uuid(862629AC-771A-47B2-8337-4E6843C1BE90), 
    helpstring("ISAXDeclHandler interface"), 
    hidden
  ]
  interface ISAXDeclHandler: IUnknown
  {
    [id(0x60010000)]
    HRESULT _stdcall elementDecl([in] unsigned short* pwchName, [in] int cchName, [in] unsigned short* pwchModel, [in] int cchModel);
    [id(0x60010001)]
    HRESULT _stdcall attributeDecl([in] unsigned short* pwchElementName, [in] int cchElementName, [in] unsigned short* pwchAttributeName, [in] int cchAttributeName, [in] unsigned short* pwchType, [in] int cchType, [in] unsigned short* pwchValueDefault, [in] int cchValueDefault, [in] unsigned short* pwchValue, [in] int cchValue);
    [id(0x60010002)]
    HRESULT _stdcall internalEntityDecl([in] unsigned short* pwchName, [in] int cchName, [in] unsigned short* pwchValue, [in] int cchValue);
    [id(0x60010003)]
    HRESULT _stdcall externalEntityDecl([in] unsigned short* pwchName, [in] int cchName, [in] unsigned short* pwchPublicId, [in] int cchPublicId, [in] unsigned short* pwchSystemId, [in] int cchSystemId);
  };

  [
    uuid(7F85D5F5-47A8-4497-BDA5-84BA04819EA6), 
    helpstring("ISAXLexicalHandler interface"), 
    hidden
  ]
  interface ISAXLexicalHandler: IUnknown
  {
    [id(0x60010000)]
    HRESULT _stdcall startDTD([in] unsigned short* pwchName, [in] int cchName, [in] unsigned short* pwchPublicId, [in] int cchPublicId, [in] unsigned short* pwchSystemId, [in] int cchSystemId);
    [id(0x60010001)]
    HRESULT _stdcall endDTD(void);
    [id(0x60010002)]
    HRESULT _stdcall startEntity([in] unsigned short* pwchName, [in] int cchName);
    [id(0x60010003)]
    HRESULT _stdcall endEntity([in] unsigned short* pwchName, [in] int cchName);
    [id(0x60010004)]
    HRESULT _stdcall startCDATA(void);
    [id(0x60010005)]
    HRESULT _stdcall endCDATA(void);
    [id(0x60010006)]
    HRESULT _stdcall comment([in] unsigned short* pwchChars, [in] int cchChars);
  };

  [
    uuid(E8917260-7579-4BE1-B5DD-7AFBFA6F077B), 
    helpstring("IVBSAXDeclHandler interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IVBSAXDeclHandler: IDispatch
  {
    [id(0x00000557), helpstring("Report an element type declaration.")]
    HRESULT _stdcall elementDecl([in, out] BSTR* strName, [in, out] BSTR* strModel);
    [id(0x00000558), helpstring("Report an attribute type declaration.")]
    HRESULT _stdcall attributeDecl([in, out] BSTR* strElementName, [in, out] BSTR* strAttributeName, [in, out] BSTR* strType, [in, out] BSTR* strValueDefault, [in, out] BSTR* strValue);
    [id(0x00000559), helpstring("Report an internal entity declaration.")]
    HRESULT _stdcall internalEntityDecl([in, out] BSTR* strName, [in, out] BSTR* strValue);
    [id(0x0000055A), helpstring("Report a parsed external entity declaration.")]
    HRESULT _stdcall externalEntityDecl([in, out] BSTR* strName, [in, out] BSTR* strPublicId, [in, out] BSTR* strSystemId);
  };

  [
    uuid(032AAC35-8C0E-4D9D-979F-E3B702935576), 
    helpstring("IVBSAXLexicalHandler interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IVBSAXLexicalHandler: IDispatch
  {
    [id(0x0000054E), helpstring("Report the start of DTD declarations, if any.")]
    HRESULT _stdcall startDTD([in, out] BSTR* strName, [in, out] BSTR* strPublicId, [in, out] BSTR* strSystemId);
    [id(0x0000054F), helpstring("Report the end of DTD declarations.")]
    HRESULT _stdcall endDTD(void);
    [id(0x00000550), helpstring("Report the beginning of some internal and external XML entities.")]
    HRESULT _stdcall startEntity([in, out] BSTR* strName);
    [id(0x00000551), helpstring("Report the end of an entity.")]
    HRESULT _stdcall endEntity([in, out] BSTR* strName);
    [id(0x00000552), helpstring("Report the start of a CDATA section.")]
    HRESULT _stdcall startCDATA(void);
    [id(0x00000553), helpstring("Report the end of a CDATA section.")]
    HRESULT _stdcall endCDATA(void);
    [id(0x00000554), helpstring("Report an XML comment anywhere in the document.")]
    HRESULT _stdcall comment([in, out] BSTR* strChars);
  };

  [
    uuid(F10D27CC-3EC0-415C-8ED8-77AB1C5E7262), 
    helpstring("IMXAttributes interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IMXAttributes: IDispatch
  {
    [id(0x0000055D), helpstring("Add an attribute to the end of the list.")]
    HRESULT _stdcall addAttribute([in] BSTR strURI, [in] BSTR strLocalName, [in] BSTR strQName, [in] BSTR strType, [in] BSTR strValue);
    [id(0x00000567), helpstring("Add an attribute, whose value is equal to the indexed attribute in the input attributes object, to the end of the list.")]
    HRESULT _stdcall addAttributeFromIndex([in] VARIANT varAtts, [in] int nIndex);
    [id(0x0000055E), helpstring("Clear the attribute list for reuse.")]
    HRESULT _stdcall clear(void);
    [id(0x0000055F), helpstring("Remove an attribute from the list.")]
    HRESULT _stdcall removeAttribute([in] int nIndex);
    [id(0x00000560), helpstring("Set an attribute in the list.")]
    HRESULT _stdcall setAttribute([in] int nIndex, [in] BSTR strURI, [in] BSTR strLocalName, [in] BSTR strQName, [in] BSTR strType, [in] BSTR strValue);
    [id(0x00000561), helpstring("Copy an entire Attributes object.")]
    HRESULT _stdcall setAttributes([in] VARIANT varAtts);
    [id(0x00000562), helpstring("Set the local name of a specific attribute.")]
    HRESULT _stdcall setLocalName([in] int nIndex, [in] BSTR strLocalName);
    [id(0x00000563), helpstring("Set the qualified name of a specific attribute.")]
    HRESULT _stdcall setQName([in] int nIndex, [in] BSTR strQName);
    [id(0x00000564), helpstring("Set the type of a specific attribute.")]
    HRESULT _stdcall setType([in] int nIndex, [in] BSTR strType);
    [id(0x00000565), helpstring("Set the Namespace URI of a specific attribute.")]
    HRESULT _stdcall setURI([in] int nIndex, [in] BSTR strURI);
    [id(0x00000566), helpstring("Set the value of a specific attribute.")]
    HRESULT _stdcall setValue([in] int nIndex, [in] BSTR strValue);
  };

  [
    uuid(C90352F5-643C-4FBC-BB23-E996EB2D51FD), 
    helpstring("IVBMXNamespaceManager interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IVBMXNamespaceManager: IDispatch
  {
    [propput, id(0x0000057E)]
    HRESULT _stdcall allowOverride([in] VARIANT_BOOL fOverride);
    [propget, id(0x0000057E)]
    HRESULT _stdcall allowOverride([out, retval] VARIANT_BOOL* fOverride);
    [id(0x0000057F)]
    HRESULT _stdcall reset(void);
    [id(0x00000580)]
    HRESULT _stdcall pushContext(void);
    [id(0x00000581)]
    HRESULT _stdcall pushNodeContext([in] IXMLDOMNode* contextNode, [in, optional, defaultvalue(True)] VARIANT_BOOL fDeep);
    [id(0x00000582)]
    HRESULT _stdcall popContext(void);
    [id(0x00000583)]
    HRESULT _stdcall declarePrefix([in] BSTR prefix, [in] BSTR namespaceURI);
    [id(0x00000584)]
    HRESULT _stdcall getDeclaredPrefixes([out, retval] IMXNamespacePrefixes** prefixes);
    [id(0x00000585)]
    HRESULT _stdcall getPrefixes([in] BSTR namespaceURI, [out, retval] IMXNamespacePrefixes** prefixes);
    [id(0x00000586)]
    HRESULT _stdcall getURI([in] BSTR prefix, [out, retval] VARIANT* uri);
    [id(0x00000587)]
    HRESULT _stdcall getURIFromNode([in] BSTR strPrefix, [in] IXMLDOMNode* contextNode, [out, retval] VARIANT* uri);
  };

  [
    uuid(C90352F4-643C-4FBC-BB23-E996EB2D51FD), 
    helpstring("IMXNamespacePrefixes interface"), 
    dual, 
    nonextensible, 
    oleautomation
  ]
  interface IMXNamespacePrefixes: IDispatch
  {
    [propget, id(0x00000000)]
    HRESULT _stdcall item([in] long index, [out, retval] BSTR* prefix);
    [propget, id(0x00000588)]
    HRESULT _stdcall length([out, retval] long* length);
    [propget, id(0xFFFFFFFC), restricted, hidden]
    HRESULT _stdcall _newEnum([out, retval]  IUnknown** ppUnk);
  };

  [
    uuid(C90352F6-643C-4FBC-BB23-E996EB2D51FD), 
    helpstring("IMXNamespaceManager interface"), 
    hidden
  ]
  interface IMXNamespaceManager: IUnknown
  {
    [id(0x60010000)]
    HRESULT _stdcall putAllowOverride([in] VARIANT_BOOL fOverride);
    [id(0x60010001)]
    HRESULT _stdcall getAllowOverride([out, retval] VARIANT_BOOL* fOverride);
    [id(0x60010002)]
    HRESULT _stdcall reset(void);
    [id(0x60010003)]
    HRESULT _stdcall pushContext(void);
    [id(0x60010004)]
    HRESULT _stdcall pushNodeContext([in] IXMLDOMNode* contextNode, [in] VARIANT_BOOL fDeep);
    [id(0x60010005)]
    HRESULT _stdcall popContext(void);
    [id(0x60010006)]
    HRESULT _stdcall declarePrefix([in] LPWSTR prefix, [in] LPWSTR namespaceURI);
    [id(0x60010007)]
    HRESULT _stdcall getDeclaredPrefix([in] long nIndex, [in, out] unsigned short* pwchPrefix, [in, out] int* pcchPrefix);
    [id(0x60010008)]
    HRESULT _stdcall getPrefix([in] LPWSTR pwszNamespaceURI, [in] long nIndex, [in, out] unsigned short* pwchPrefix, [in, out] int* pcchPrefix);
    [id(0x60010009)]
    HRESULT _stdcall getURI([in] LPWSTR pwchPrefix, [in] IXMLDOMNode* pContextNode, [in, out] unsigned short* pwchUri, [in, out] int* pcchUri);
  };

  [
    uuid(3EFAA427-272F-11D2-836F-0000F87A7782), 
    hidden
  ]
  dispinterface XMLDOMDocumentEvents
  {
    properties:
    methods:
    [id(0x000000C6)]
    HRESULT ondataavailable(void);
    [id(0xFFFFFD9F)]
    HRESULT onreadystatechange(void);
  };

  [
    uuid(88D96A05-F192-11D4-A65F-0040963251E5), 
    helpstring("W3C-DOM XML Document 6.0 (Apartment)")
  ]
  coclass DOMDocument60
  {
    [default] interface IXMLDOMDocument3;
    [default, source] dispinterface XMLDOMDocumentEvents;
  };

  [
    uuid(88D96A06-F192-11D4-A65F-0040963251E5), 
    helpstring("W3C-DOM XML Document 6.0 (Free threaded)")
  ]
  coclass FreeThreadedDOMDocument60
  {
    [default] interface IXMLDOMDocument3;
    [default, source] dispinterface XMLDOMDocumentEvents;
  };

  [
    uuid(88D96A07-F192-11D4-A65F-0040963251E5), 
    helpstring("XML Schema Cache 6.0")
  ]
  coclass XMLSchemaCache60
  {
    [default] interface IXMLDOMSchemaCollection2;
  };

  [
    uuid(88D96A08-F192-11D4-A65F-0040963251E5), 
    helpstring("XSL Stylesheet Cache 6.0")
  ]
  coclass XSLTemplate60
  {
    [default] interface IXSLTemplate;
  };

  [
    uuid(88D96A0A-F192-11D4-A65F-0040963251E5), 
    helpstring("XML HTTP Request class 6.0")
  ]
  coclass XMLHTTP60
  {
    [default] interface IXMLHTTPRequest;
  };

  [
    uuid(88D96A09-F192-11D4-A65F-0040963251E5), 
    helpstring("Free Threaded XML HTTP Request class 6.0")
  ]
  coclass FreeThreadedXMLHTTP60
  {
    [default] interface IXMLHTTPRequest2;
  };

  [
    uuid(88D96A0B-F192-11D4-A65F-0040963251E5), 
    helpstring("Server XML HTTP Request 6.0 ")
  ]
  coclass ServerXMLHTTP60
  {
    [default] interface IServerXMLHTTPRequest2;
  };

  [
    uuid(88D96A0C-F192-11D4-A65F-0040963251E5), 
    helpstring("SAX XML Reader 6.0")
  ]
  coclass SAXXMLReader60
  {
    [default] interface IVBSAXXMLReader;
    interface ISAXXMLReader;
  };

  [
    uuid(88D96A0F-F192-11D4-A65F-0040963251E5), 
    helpstring("Microsoft XML Writer 6.0")
  ]
  coclass MXXMLWriter60
  {
    [default] interface IMXWriter;
    interface ISAXContentHandler;
    interface ISAXDeclHandler;
    interface ISAXDTDHandler;
    interface ISAXErrorHandler;
    interface ISAXLexicalHandler;
    interface IVBSAXContentHandler;
    interface IVBSAXDeclHandler;
    interface IVBSAXDTDHandler;
    interface IVBSAXErrorHandler;
    interface IVBSAXLexicalHandler;
  };

  [
    uuid(88D96A10-F192-11D4-A65F-0040963251E5), 
    helpstring("Microsoft HTML Writer 6.0")
  ]
  coclass MXHTMLWriter60
  {
    [default] interface IMXWriter;
    interface ISAXContentHandler;
    interface ISAXDeclHandler;
    interface ISAXDTDHandler;
    interface ISAXErrorHandler;
    interface ISAXLexicalHandler;
    interface IVBSAXContentHandler;
    interface IVBSAXDeclHandler;
    interface IVBSAXDTDHandler;
    interface IVBSAXErrorHandler;
    interface IVBSAXLexicalHandler;
  };

  [
    uuid(88D96A0E-F192-11D4-A65F-0040963251E5), 
    helpstring("SAX Attributes 6.0")
  ]
  coclass SAXAttributes60
  {
    [default] interface IMXAttributes;
    interface IVBSAXAttributes;
    interface ISAXAttributes;
  };

  [
    uuid(88D96A11-F192-11D4-A65F-0040963251E5), 
    helpstring("MX Namespace Manager 6.0")
  ]
  coclass MXNamespaceManager60
  {
    [default] interface IVBMXNamespaceManager;
    interface IMXNamespaceManager;
  };

};